# Copyright 2022-2024 Free Software Foundation, Inc.
# Copyright (C) 2020-2024 Intel Corporation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test AMX in core dumps.

require allow_amx_tests

standard_testfile amd64-amx.c
set gcorefile ${binfile}.gcore

if {[prepare_for_testing "failed to prepare" ${testfile} ${srcfile} \
	{debug additional_flags=-mamx-tile additional_flags=-mamx-int8}]} {
    return -1
}

if {![runto_main]} {
    return -1
}

proc test_zeroed_tile {reg} {
    gdb_test "print $reg.m_int8" \
	"= \\{\\{0 <repeats 64 times>\\} <repeats 16 times>\\}"
}

set line1 [gdb_get_line_number "BP1"]
gdb_breakpoint $line1
gdb_continue_to_breakpoint "line1" ".*$srcfile:$line1.*"

# Other corefile tests check and save the variables here to use them again
# when the corefile is loaded.  Due to the complexity of the tiles, this
# is not done here.

if {![gdb_gcore_cmd $gcorefile "save a corefile"]} {
    return -1
}

# Now restart gdb and load the corefile.
clean_restart ${binfile}
gdb_test "core ${gcorefile}" \
    "Core was generated by .*" "re-load generated corefile"

gdb_test "print/x \$tilecfg_raw" \
	"= \\{0x1, 0x0 <repeats 15 times>, 0xc, 0x0, 0x10, 0x0, 0x10, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8,\
	 0x0 <repeats 21 times>, 0x2, 0x3, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0\\}"

gdb_test "print \$tilecfg" \
    [join {"= \\{palette = 1" \
	"start_row = 0" \
	"tile0_colsb = 12" \
	"tile1_colsb = 16" \
	"tile2_colsb = 16" \
	"tile3_colsb = 8" \
	"tile4_colsb = 8" \
	"tile5_colsb = 8" \
	"tile6_colsb = 0" \
	"tile7_colsb = 0" \
	"tile0_rows = 2" \
	"tile1_rows = 3" \
	"tile2_rows = 2" \
	"tile3_rows = 2" \
	"tile4_rows = 2" \
	"tile5_rows = 2" \
	"tile6_rows = 0" \
	"tile7_rows = 0\\}"} \
	", "]

gdb_test "print \$tmm0.m_uint8" \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3\\}\\}"} \
	", "]

gdb_test "print \$tmm1.m_uint8" \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4\\}" \
	"\\{2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5\\}\\}"} \
	", "]

gdb_test "print \$tmm2.m_int32" \
    [join {"= \\{\\{20, 32, 44, 56\\}" \
	"\\{32, 56, 80, 104\\}\\}"} \
	", "]

gdb_test "print \$tmm3.m_bf16" \
    [join {"= \\{\\{0, 0.125, 0.25, 0.375\\}" \
	"\\{0.5, 0.625, 0.75, 0.875\\}\\}"} \
	", "]

gdb_test "print \$tmm4.m_fp32" \
    [join {"= \\{\\{1, 1.125\\}" \
	"\\{1.25, 1.375\\}\\}"} \
	", "]

gdb_test "print \$tmm5.m_int8" \
    [join {"= \\{\\{-1, -1, -1, -1, 1, 1, 1, 1\\}" \
	"\\{1, 1, 1, 1, -5, -5, -5, -5\\}\\}"} \
	", "]

for {set i 6} {$i < 8} {incr i} {
    test_zeroed_tile "\$tmm$i"
}
