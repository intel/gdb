# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file tests basic AMX functionality.

if { ![istarget "*-*-linux*"] } {
    unsupported "AMX tests are only supported on Linux."
    return -1
}

if { [skip_amx_tests] } {
    unsupported "Target does not support AMX."
    return -1
}

standard_testfile

if { [prepare_for_testing "failed to prepare" ${testfile} ${srcfile} \
     debug] } {
    return -1
}

if { ![runto_main] } {
    untested "could not run to main"
    return -1
}

proc test_zeroed_tile {reg} {
    gdb_test "print $reg.m_int8" \
	"= \\{\\{0 <repeats 64 times>\\} <repeats 16 times>\\}"
}

set line1 [gdb_get_line_number "BP1"]
set line2 [gdb_get_line_number "BP2"]
gdb_breakpoint $line1
gdb_breakpoint $line2

# Registers should be displayed as zeroed before AMX enablement.
with_test_prefix "Before AMX is enabled" {
    gdb_test "print \$tilecfg" "= 0"
    for {set i 0} {$i < 8} {incr i} {
	test_zeroed_tile "\$tmm$i"
    }
}


# First matrix multiplication: matC1 = matA1 x matB1.
gdb_continue_to_breakpoint "line1" ".*$srcfile:$line1.*"

# With gdbserver the dynamic dimensioning doesn't work properly.  We will
# address this in a future revision.  For now, we accept this as passing.
if [target_is_gdbserver] then {
    set tmm0 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0 <repeats 52 times>\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0 <repeats 52 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm0 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm1 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0 <repeats 48 times>\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 0 <repeats 48 times>\\}" \
	"\\{2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 <repeats 48 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 13 times>\\}"} \
	", "]
} else {
    set tmm1 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4\\}" \
	"\\{2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm2 \
    [join {"= \\{\\{20, 32, 44, 56, 0 <repeats 12 times>\\}" \
	"\\{32, 56, 80, 104, 0 <repeats 12 times>\\}" \
	"\\{0 <repeats 16 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm2 \
    [join {"= \\{\\{20, 32, 44, 56\\}" \
	"\\{32, 56, 80, 104\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm3 \
    [join {"= \\{\\{0, 0.125, 0.25, 0.375, 0 <repeats 28 times>\\}" \
	"\\{0.5, 0.625, 0.75, 0.875, 0 <repeats 28 times>\\}" \
	"\\{0 <repeats 32 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm3 \
    [join {"= \\{\\{0, 0.125, 0.25, 0.375\\}" \
	"\\{0.5, 0.625, 0.75, 0.875\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm4 \
    [join {"= \\{\\{1, 1.125, 0 <repeats 14 times>\\}" \
	"\\{1.25, 1.375, 0 <repeats 14 times>\\}" \
	"\\{0 <repeats 16 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm4 \
    [join {"= \\{\\{1, 1.125\\}" \
	"\\{1.25, 1.375\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm5 \
    [join {"= \\{\\{-1, -1, -1, -1, 1, 1, 1, 1, 0 <repeats 56 times>\\}" \
	"\\{1, 1, 1, 1, -5, -5, -5, -5, 0 <repeats 56 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm5 \
    [join {"= \\{\\{-1, -1, -1, -1, 1, 1, 1, 1\\}" \
	"\\{1, 1, 1, 1, -5, -5, -5, -5\\}\\}"} \
	", "]
}

with_test_prefix "matC1" {
    gdb_test "print/x \$tilecfg" \
	"= 0x202020203020{43}80008000800100010000c0{31}1"

    gdb_test "print \$tmm0.m_uint8" "$tmm0"
    gdb_test "print \$tmm1.m_uint8" "$tmm1"
    gdb_test "print \$tmm2.m_int32" "$tmm2"
    gdb_test "print \$tmm3.m_bf16" "$tmm3"
    gdb_test "print \$tmm4.m_fp32" "$tmm4"
    gdb_test "print \$tmm5.m_int8" "$tmm5"

    for {set i 6} {$i < 8} {incr i} {
	test_zeroed_tile "\$tmm$i"
    }
}


# Second matrix multiplication: matC2 = matA2 x matB2.
gdb_continue_to_breakpoint "line2" ".*$srcfile:$line2.*"

# With gdbserver the dynamic dimensioning doesn't work properly.  We will
# address this in a future revision.  For now, we accept this as passing.
if [target_is_gdbserver] then {
    set tmm0 \
    [join {"= \\{\\{5, 5, 5, 5, 6, 6, 6, 6, 0 <repeats 56 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 15 times>\\}"} \
	", "]
} else {
    set tmm0 "= \\{\\{5, 5, 5, 5, 6, 6, 6, 6\\}\\}"
}

if [target_is_gdbserver] then {
    set tmm1 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0 <repeats 52 times>\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0 <repeats 52 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 14 times>\\}"} \
	", "]
} else {
    set tmm1 \
    [join {"= \\{\\{0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2\\}" \
	"\\{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3\\}\\}"} \
	", "]
}

if [target_is_gdbserver] then {
    set tmm2 \
    [join {"= \\{\\{24, 68, 112, 0 <repeats 13 times>\\}" \
	"\\{0 <repeats 16 times>\\} <repeats 15 times>\\}"} \
	", "]
} else {
    set tmm2 "= \\{\\{24, 68, 112\\}\\}"
}

with_test_prefix "matC2" {
    gdb_test "print/x \$tilecfg" "= 0x102010{55}c000c00080{31}1"

    gdb_test "print \$tmm0.m_int8" "$tmm0"
    gdb_test "print \$tmm1.m_int8" "$tmm1"
    gdb_test "print \$tmm2.m_int32" "$tmm2"

    for {set i 3} {$i < 8} {incr i} {
	test_zeroed_tile "\$tmm$i"
    }
}


# Test setting tiles.
# With gdbserver the dynamic dimensioning doesn't work properly.  We will
# address this in a future revision.  For now, we accept this as passing.
if [target_is_gdbserver] then {
    set tmm0 \
    [join {"= \\{\\{1, 5, 5, 5, 6, 6, 6, 6, 0 <repeats 56 times>\\}" \
	"\\{0 <repeats 64 times>\\} <repeats 15 times>\\}"} \
	", "]
} else {
    set tmm0 "= \\{\\{1, 5, 5, 5, 6, 6, 6, 6\\}\\}"
}

if [target_is_gdbserver] then {
    set tmm2 \
    [join {"= \\{\\{1, 1, 1, 0 <repeats 13 times>\\}" \
	"\\{0 <repeats 16 times>\\} <repeats 15 times>\\}"} \
	", "]
} else {
    set tmm2 "= \\{\\{1, 1, 1\\}\\}"
}

with_test_prefix "setting tiles" {
    gdb_test_no_output "set \$tmm0.m_uint8\[0\]\[0\] = 1"
    gdb_test "print \$tmm0.m_uint8" "$tmm0"

    gdb_test_no_output "set \$tmm2.m_int32\[0\] = {1, 1, 1}"
    gdb_test "print \$tmm2.m_int32" "$tmm2"

    gdb_test_no_output "set \$tmm0.m_bf16\[0\]\[0\] = 0.5"
    gdb_test "print \$tmm0.m_bf16\[0\]\[0\]" "= 0.5"

    gdb_test_no_output "set \$tmm0.m_fp32\[0\]\[0\] = 0.75"
    gdb_test "print \$tmm0.m_fp32\[0\]\[0\]" "= 0.75"

    gdb_test_no_output "set \$tmm0.m_int8\[0\]\[0\] = -1"
    gdb_test "print \$tmm0.m_int8\[0\]\[0\]" "= -1"
}


set line3 [gdb_get_line_number "BP3"]
gdb_breakpoint $line3
gdb_continue_to_breakpoint "line3" ".*$srcfile:$line3.*"

# Tilecfg can only be set after _tile_release.  Continuing will lead
# to a SIGILL otherwise.
with_test_prefix "setting tilecfg" {
    gdb_test_no_output "set \$tilecfg = 0x1"
    gdb_test "print/x \$tilecfg" "= 0x1"
}

gdb_test "continue" \
    ".*\\\[Inferior $decimal \\\(process $decimal\\\) exited normally\\]"
