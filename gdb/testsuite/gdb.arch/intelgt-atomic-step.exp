# Copyright 2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests stepping an atomic sequence.

load_lib sycl.exp

standard_testfile intelgt-atomic.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

proc step_over_atomic {displaced_stepping} {
    global hex decimal

    set fill "\[^\r\n\]*"
    set current_addr [get_hexadecimal_valueof "\$pc" "0"]
    set atomic_address 0
    set is_compacted 0

    gdb_test_multiple "disassemble" "find atomic" {
	-re "($hex)(${fill}Atomic${fill})" {
	    set addr $expect_out(1,string)
	    set inst $expect_out(2,string)
	    # Skip everything until reaching the current address.
	    if {($current_addr <= $addr) && !$atomic_address} {
		set atomic_address $addr
		if {[regexp -all "Compacted" $inst]} {
		    set is_compacted 1
		}
	    }
	    exp_continue
	}
	-re "${hex}${fill}" {
	    exp_continue
	}
	-re -wrap "" {
	    pass $gdb_test_name
	}
    }
    gdb_assert {$atomic_address} "found atomic address"

    gdb_breakpoint "*$atomic_address" {temporary}
    gdb_continue_to_breakpoint "continue to bp at atomic instruction"

    gdb_test_no_output "set scheduler-locking step"
    gdb_test_no_output "set debug displaced on"
    gdb_test_no_output "set displaced-stepping $displaced_stepping"

    set curr_pc $atomic_address
    set next_pc [format 0x%x [expr $curr_pc + 0x10]]
    if {$is_compacted} {
	set next_pc [format 0x%x [expr $curr_pc + 0x08]]
    }

    gdb_test "nexti" "${hex}\[\\t\\s\]+${decimal}${fill}" \
	"step over atomic at $curr_pc"

    set pc_test_name "check PC after atomic step over"
    set pc [get_hexadecimal_valueof "\$pc" "invalid" "read PC"]
    if {($displaced_stepping eq "on" && $pc eq $next_pc)
	|| ($displaced_stepping eq "off" && $pc > $next_pc)} {
	pass $pc_test_name
    } else {
	fail $pc_test_name
    }

    # Make sure that the application computes correct results.
    gdb_test "continue" "Correct.*" "correct matrix multiplication"
}

foreach device $sycl_device_list {
    # Running joint_matrix with sub group size 16 is currently not supported on
    # ATS-M (GSD-4181).
    set sg_size 8
    if {[is_pvc $device]} {
	set sg_size 16
    }
    verbose -log "subgroup size: $sg_size"
    # joint_matrix is currently not supported with O0 (GSD-4081).
    set flags [list sycl debug optimize=-O2 additional_flags=-DSG_SIZE=$sg_size]
    if {[build_executable "failed to compile $srcfile" "${binfile}" $srcfile $flags]} {
	return -1
    }

    with_test_prefix [sycl_get_device_prefix $device] {
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	set first_line [gdb_get_line_number "kernel-line-1"]

	foreach_with_prefix displaced_stepping {"on" "off"} {
	    clean_restart "${binfile}"
	    if {![runto_main [sycl_get_device_args $device]]} {
		continue
	    }

	    # With the optimized code we hit a BP with the host inferior, avoid
	    # it by setting the condition.
	    gdb_breakpoint "$first_line if \$_inferior > 1" {temporary}
	    gdb_continue_to_breakpoint "hit the BP at the first line"
	    step_over_atomic $displaced_stepping
	}
    }
}
