# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Tests a workaround for erratum #22015246029.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {

    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    return 0
	}

	clean_restart "${binfile}"

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set kernel_start_bp_line [gdb_get_line_number "kernel-start"]
	gdb_breakpoint $kernel_start_bp_line
	gdb_continue_to_breakpoint "kernel-start breakpoint" \
	    ".*$srcfile:$kernel_start_bp_line.*"

	set test_name "find goto's next instruction address"
	set goto_next_instr_addr "invalid"
	gdb_test_multiple "disassemble" $test_name -lbl {
	    -re "\r\n\[^\r\n\]+ $hex \[^\r\n\]+ goto\[^\r\n\]+\r\n   ($hex) \[^\r\n\]+" {
		set goto_next_instr_addr $expect_out(1,string)
		exp_continue
	    }
	    -re -wrap "" {
		gdb_assert {$goto_next_instr_addr ne "invalid"} $test_name
	    }
	}

	# We should not hit that breakpoint.
	#
	# On some devices, this provoked a spurious breakpoint exception
	# at the JOIN instruction.  GDB is to ignore the exception and
	# silently resume.
	gdb_breakpoint "*$goto_next_instr_addr"
	gdb_test "continue" "$inferior_exited_re normally].*"
    }
}
