# Copyright 2019-2024 Free Software Foundation, Inc.
# Copyright (C) 2019-2024 Intel Corporation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests disassembly support for Intel(R) Graphics Technology.

load_lib sycl.exp

standard_testfile sycl-simple.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![sycl_start $device]} {
	    continue
	}

	# Set breakpoint inside the kernel.
	set bp_location [gdb_get_line_number "inside-kernel"]
	gdb_breakpoint "$srcfile:$bp_location"

	# Hit the breakpoint.
	gdb_continue_to_breakpoint "kernel" ".*$srcfile:$bp_location.*"

	# Check if IGA is supposed to exist.
	set has_iga 0
	gdb_test_multiple "show configuration" "check iga" {
	    -re -wrap "with-libiga64.*" {
		set has_iga 1
	    }
	    -re -wrap "without-libiga64.*" {
		set has_iga 0
	    }
	}

	if {$has_iga} {
	    gdb_test "disassemble \$pc, \$pc+64" \
		[multi_line "Dump of assembler code from $hex to $hex:" \
		     "=> $hex .*" \
		     "End of assembler dump."] \
		"disassemble with libiga"

	    untested "disassemble without libiga"
	} else {
	    untested "disassemble with libiga"

	    gdb_test "disassemble \$pc, \$pc+64" \
		[multi_line "Dump of assembler code from $hex to $hex:" \
		     "=> $hex \[^\r\n\]+" \
		     "Disassemble feature not available: libiga64 is missing." \
		     "" \
		     "unknown disassembler error.*"] \
		"disassemble without libiga"
	}
    }
}
