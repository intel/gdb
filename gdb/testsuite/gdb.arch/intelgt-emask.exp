# Copyright 2019-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for the Intel(R) Graphics Technology emask register via a
# SYCL program.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

proc test_emask {expected {check_dmask "false"}} {
    set dim0 [get_integer_valueof "dim0" "-1"]
    gdb_assert {$dim0 != -1} "dim0 is valid"

    set dmask "0xffff"
    if {$dim0 > 15} {
	set dmask "0x1ff"
	set expected "0x[format %x [expr $dmask & $expected]]"
    }

    verbose -log "expected emask: $expected"
    gdb_test "p/x \$emask & $dmask" "$expected"

    if {$check_dmask} {
	verbose -log "expected dmask: $dmask"
	gdb_test \
	    "print/x (((int\[4\])\$sr0)\[2\] & (1 <<  \$_simd_width) - 1)" \
	    "$dmask"
    }
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set bp_even_then_then [gdb_get_line_number "break even then-then"]
	set bp_even_then_else [gdb_get_line_number "break even then-else"]
	set bp_even_else_then [gdb_get_line_number "break even else-then"]
	set bp_even_else_else [gdb_get_line_number "break even else-else"]
	set bp_odd_then_then [gdb_get_line_number "break odd then-then"]
	set bp_odd_then_else [gdb_get_line_number "break odd then-else"]
	set bp_odd_else_then [gdb_get_line_number "break odd else-then"]
	set bp_odd_else_else [gdb_get_line_number "break odd else-else"]
	set bp_even_1 [gdb_get_line_number "break even_1"]
	set bp_even_2 [gdb_get_line_number "break even_2"]
	set bp_odd_1 [gdb_get_line_number "break odd_1"]
	set bp_odd_2 [gdb_get_line_number "break odd_2"]

	gdb_breakpoint $bp_even_1
	gdb_breakpoint $bp_even_2
	gdb_breakpoint $bp_odd_1
	gdb_breakpoint $bp_odd_2
	gdb_breakpoint $bp_even_then_then
	gdb_breakpoint $bp_even_then_else
	gdb_breakpoint $bp_even_else_then
	gdb_breakpoint $bp_even_else_else
	gdb_breakpoint $bp_odd_then_then
	gdb_breakpoint $bp_odd_then_else
	gdb_breakpoint $bp_odd_else_then
	gdb_breakpoint $bp_odd_else_else

	# We expect to hit the breakpoints, but the order is arbitrary.
	# The program sets the subgroup size to 16 for a data range of 25
	# elements.  Hence, we expect to have 2 threads where
	# - one thread covers elements 0-15, with a dmask of 0xffff;
	# - one thread covers elements 16-24, with a dmask of 0x1ff.
	variable bp_hit
	array set bp_hit {}
	for {set i 1} {$i <= 12} {incr i} {
	    set bp_hit($i) 0
	}

	for {set i 0} {$i < 24} {incr i} {
	    # Check the value of dmask only at leaf functions.
	    gdb_test_multiple "continue" "hit bp" {
		-re -wrap "Breakpoint .*$srcfile:$bp_even_1.*" {
		    incr bp_hit(1)
		    with_test_prefix "even_1, hit $bp_hit(1)" {
			test_emask "0x1111" "true"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_even_2.*" {
		    incr bp_hit(2)
		    with_test_prefix "even_2, hit $bp_hit(2)" {
			test_emask "0x4444" "true"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_1.*" {
		    incr bp_hit(3)
		    with_test_prefix "odd_1, hit $bp_hit(3)" {
			test_emask "0x2222" "true"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_2.*" {
		    incr bp_hit(4)
		    with_test_prefix "odd_2, hit $bp_hit(4)" {
			test_emask "0x8888" "true"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_even_then_then.*" {
		    incr bp_hit(5)
		    with_test_prefix "even then-then, hit $bp_hit(5)" {
			test_emask "0x101"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_even_then_else.*" {
		    incr bp_hit(6)
		    with_test_prefix "even then-else, hit $bp_hit(6)" {
			test_emask "0x1010"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_even_else_then.*" {
		    incr bp_hit(7)
		    with_test_prefix "even else-then, hit $bp_hit(7)" {
			test_emask "0x404"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_even_else_else.*" {
		    incr bp_hit(8)
		    with_test_prefix "even else-else, hit $bp_hit(8)" {
			test_emask "0x4040"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_then_then.*" {
		    incr bp_hit(9)
		    with_test_prefix "odd then-then, hit $bp_hit(9)" {
			test_emask "0x202"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_then_else.*" {
		    incr bp_hit(10)
		    with_test_prefix "odd then-else, hit $bp_hit(10)" {
			test_emask "0x2020"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_else_then.*" {
		    incr bp_hit(11)
		    with_test_prefix "odd else-then, hit $bp_hit(11)" {
			test_emask "0x808"
			pass $gdb_test_name
		    }
		}

		-re -wrap "Breakpoint .*$srcfile:$bp_odd_else_else.*" {
		    incr bp_hit(12)
		    with_test_prefix "odd else-else, hit $bp_hit(12)" {
			test_emask "0x8080"
			pass $gdb_test_name
		    }
		}
	    }
	}

	gdb_assert {$bp_hit(1) == 2} "bp at even_1 is hit twice"
	gdb_assert {$bp_hit(2) == 2} "bp at even_2 is hit twice"
	gdb_assert {$bp_hit(3) == 2} "bp at odd_1 is hit twice"
	gdb_assert {$bp_hit(4) == 2} "bp at odd_2 is hit twice"
	gdb_assert {$bp_hit(5) == 2} "bp at even then/then is hit twice"
	gdb_assert {$bp_hit(6) == 2} "bp at even then/else is hit twice"
	gdb_assert {$bp_hit(7) == 2} "bp at even else/then is hit twice"
	gdb_assert {$bp_hit(8) == 2} "bp at even else/else is hit twice"
	gdb_assert {$bp_hit(9) == 2} "bp at odd then/then is hit twice"
	gdb_assert {$bp_hit(10) == 2} "bp at odd then/else is hit twice"
	gdb_assert {$bp_hit(11) == 2} "bp at odd else/then is hit twice"
	gdb_assert {$bp_hit(12) == 2} "bp at odd else/else is hit twice"
    }
}
