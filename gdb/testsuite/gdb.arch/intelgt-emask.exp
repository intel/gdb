# Copyright 2019-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for the Intel(R) Graphics Technology emask register via a
# SYCL program.

load_lib sycl.exp

standard_testfile .cpp

if {[skip_sycl_tests]} {
    unsupported "target does not support SYCL"
    return 0
}

if {![require_sycl_device "gpu" "Intel*"]} {
    unsupported "test is aimed at Intel GPUs only"
    return 0
}

if {[prepare_sycl_for_testing $binfile $srcfile]} {
    return -1
}

if {[start_sycl_program] < 0} {
    return -1
}

# Wrap the entire test in a namespace to avoid contaminating other tests.
namespace eval $testfile {

set bp_even_1 [gdb_get_line_number "break even_1"]
set bp_even_2 [gdb_get_line_number "break even_2"]
set bp_odd_1 [gdb_get_line_number "break odd_1"]
set bp_odd_2 [gdb_get_line_number "break odd_2"]

gdb_breakpoint $bp_even_1
gdb_breakpoint $bp_even_2
gdb_breakpoint $bp_odd_1
gdb_breakpoint $bp_odd_2

# We expect to hit the breakpoints, but the order is arbitrary.
# The program sets the subgroup size to 16 for a data range of 25
# elements.  Hence, we expect to have 2 threads where
# - one thread covers elements 0-15, with a dmask of 0xffff;
# - one thread covers elements 16-24, with a dmask of 0x1ff.
variable bp_hit
array set bp_hit {}
for {set i 1} {$i <= 4} {incr i} {
    set bp_hit($i) 0
}

# Convenience procedures to check register values.

proc test_regs {emask ret_emask dmask} {
    gdb_test "print/x \$emask" "$emask"
    gdb_test "print/x \$framedesc.return_emask" "$ret_emask"
    gdb_test "print/x ((int\[4\])\$sr0)\[2\]" "$dmask"
}

# MAIN_EMASK is the execution mask at the first level of branching,
# inside the main kernel's frame.

proc test_all {emask main_emask} {
    global hex

    set dim0 [get_integer_valueof "dim0" "-1"]
    gdb_assert {$dim0 != -1} "dim0 is valid"

    set dmask "0xffff"
    if {$dim0 > 15} {
	set dmask      "0x1ff"
	set emask      "0x[format %x [expr $dmask & $emask]]"
	set main_emask "0x[format %x [expr $dmask & $main_emask]]"
    }

    verbose -log "expected emask: $emask, dmask: $dmask, main_emask: $main_emask"

    with_test_prefix "dim0: $dim0" {
	with_test_prefix "frame 0" {
	    test_regs "$emask" "$emask" "$dmask"
	}
	gdb_test "frame 1"
	with_test_prefix "frame 1" {
	    test_regs "$emask" "$main_emask" "$dmask"
	}
	gdb_test "frame 2"
	with_test_prefix "frame 2" {
	    test_regs "$main_emask" "$hex" "$dmask"
	}
    }
}

for {set i 0} {$i < 8} {incr i} {
    gdb_test_multiple "continue" "hit bp" {
	-re -wrap "Breakpoint .*$srcfile:$bp_even_1.*" {
	    incr bp_hit(1)
	    with_test_prefix "even_1, hit $bp_hit(1)" {
		test_all "0x1111" "0x5555"
		pass $gdb_test_name
	    }
	}

	-re -wrap "Breakpoint .*$srcfile:$bp_even_2.*" {
	    incr bp_hit(2)
	    with_test_prefix "even_2, hit $bp_hit(2)" {
		test_all "0x4444" "0x5555"
		pass $gdb_test_name
	    }
	}

	-re -wrap "Breakpoint .*$srcfile:$bp_odd_1.*" {
	    incr bp_hit(3)
	    with_test_prefix "odd_1, hit $bp_hit(3)" {
		test_all "0x2222" "0xaaaa"
		pass $gdb_test_name
	    }
	}

	-re -wrap "Breakpoint .*$srcfile:$bp_odd_2.*" {
	    incr bp_hit(4)
	    with_test_prefix "odd_2, hit $bp_hit(4)" {
		test_all "0x8888" "0xaaaa"
		pass $gdb_test_name
	    }
	}
    }
}

gdb_assert {$bp_hit(1) == 2}
gdb_assert {$bp_hit(2) == 2}
gdb_assert {$bp_hit(3) == 2}
gdb_assert {$bp_hit(4) == 2}

# End of namespace.
}
