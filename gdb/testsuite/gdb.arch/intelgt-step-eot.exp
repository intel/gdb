# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDBs support for SYCL; in particular, single-stepping the
# source and printing values of local vars and data elements.

load_lib sycl.exp

standard_testfile .cpp

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    if {![is_level_zero_debug_api]} {
	unsupported "test is aimed at Level Zero debug API only"
	return 0
    }

    if {[start_sycl_program] < 0} {
	return -1
    }

    gdb_breakpoint [gdb_get_line_number "in-kernel"] {temporary}
    gdb_continue_to_breakpoint "run to kernel" ".*in-kernel.*"

    # Keep other threads stopped.
    gdb_test_no_output "set scheduler-locking step"

    # Navigate close to the end of the kernel.  This depends on details in
    # the debug information.
    gdb_test "finish"

    # Stepping over the end of the kernel ends this thread dispatch.
    #
    # GDB used to hang waiting for the single-step completion event that
    # would never come.
    gdb_test "next" "\\\[Thread \[0-9\]+\.\[0-9\]+ became inactive\\\]"
}

test_initialize
