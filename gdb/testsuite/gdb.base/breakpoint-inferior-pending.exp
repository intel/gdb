# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that a breakpoint can be created pending on a non-existing inferior.

standard_testfile

# Check if start command is supported.
if {[use_gdb_stub]} {
    return 0
}

if {[prepare_for_testing "failed to prepare" $testfile $srcfile debug]} {
    return -1
}

# Set a breakpoint to inferior 2 before it even exists.
set bp_loc [gdb_get_line_number "break-here"]
gdb_breakpoint "$bp_loc inferior 2" {allow-pending}

gdb_test "info break" \
    "1 +breakpoint     keep y.*PENDING.* +\[0-9\]+ +inferior +2" \
    "one pending breakpoint info"

# Now add the 2nd inferior.
gdb_test "add-inferior"
gdb_test "inferior 2"
gdb_file_cmd $binfile
if {[gdb_run_cmd] < 0} {
    fail "run inferior 2"
    return
}

gdb_test_multiple "" "run inferior 2 until bp" {
    -re -wrap "Breakpoint .*$srcfile:$bp_loc.*" {
    	pass $gdb_test_name
    }
}

gdb_test "info threads" \
    ".*2.1.*$srcfile:$bp_loc.*" \
    "current thread inside inferior 2"

gdb_continue_to_end
