# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# In Fortran the actual program is often wrapped by an artificial main function
# used by the Fortran runtime.  E.g. ifx and flang emit a symbol 'main' in
# the .text section for the wrapper main, while also emitting a DIE for the
# Fortran program.
# If someone were to name their Fortran program 'main', setting a breakpoint on
# 'main' will actually set 2 breakpoints, one on the .text symbol and one on
# for DIE symbol.  To avoid this name clash, GDB was patched for this scenario
# to prefer the linkage name of the main subprogram for setting a breakpoint,
# which is unique in this case and is also being emitted by ifx/flang.  This
# test checks whether GDB correctly uses the linkage_name for name of the main
# subprogram when it is available and whether 'start' works as expected.
#
# The tested Fortran program looks like:
#
#     program main
#     end program main
#

load_lib dwarf.exp

if {![dwarf2_support]} {
    verbose "Skipping $gdb_test_file_name."
    return 0
}

# IGDB-3731 should be fixed for the test to verify if test should run only
# on x86 and if disassemble check may be replaced with backtrace.
if {![is_x86_like_target]} {
    unsupported "test can only run on x86 target"
    return 0
}

# Only extended remote supports the 'run' command.
if [use_gdb_stub] {
    unsupported "gdbserver does not support 'start' command"
    return 0
}

standard_testfile .c -dw.S

set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    declare_labels Llines
    global srcdir subdir srcfile

    cu {} {
	compile_unit {
	    {language @DW_LANG_Fortran90}
	    {name $srcfile}
	} {
	    subprogram {
		{MACRO_AT_range {MAIN__}}
		{linkage_name "MAIN__"}
		{name "main"}
		{external 1 flag}
		{main_subprogram 1 flag}
	    }
	}
    }
}

if {[prepare_for_testing "failed to prepare" ${testfile} \
	 [list $srcfile $asm_file] {nodebug}]} {
    return -1
}

# Test that the "start" command stops in the "actual_main" function.
# This should happen because we used DW_AT_main_subprogram to tell gdb
# that this was the user-written "main" function.

if {[gdb_start_cmd] < 0} {
    fail "could not start ${testfile}"
    return -1
}

gdb_test "" ".*Temporary breakpoint.*in main \\\(\\\).*" "stopped in main"

# Check the disassembly to see whether we are in the correct main and did
# not land in the wrapper main.
gdb_test_multiple "disassemble" "stopped in correct main" {
    -re -wrap "$hex.*call.*$hex.*MAIN__" {
	fail $gdb_test_name
    }
    -re -wrap "Dump of assembler code for function MAIN__.*" {
	pass $gdb_test_name
    }
}
