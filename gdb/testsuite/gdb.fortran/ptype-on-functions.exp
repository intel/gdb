# Copyright 2019-2021 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file contains a test for printing the types of functions.

if { [skip_fortran_tests] } { return -1 }

standard_testfile .f90
load_lib "fortran.exp"

if {[prepare_for_testing "failed to prepare" $testfile $srcfile {debug f90}]} {
    return -1
}

if ![fortran_runto_main] then {
    perror "couldn't run to main"
    continue
}

set int [fortran_int4]
set logical4 [fortran_logical4]
set intN [fortran_integerN]

gdb_test_multiple "ptype some_module::get_number" "ptype some_module::get_number" {
    -re -wrap "type = $int \\(Type __class_some_module_Number(_t)?\\)" {
	pass $gdb_test_name
    }
    -re -wrap "type = $int \\(PTR TO \-\> \\( Type number \\)\\)" {
	pass $gdb_test_name
    }
}

gdb_test_multiple "ptype some_module::set_number" "ptype some_module::set_number" {
    -re -wrap "type = void \\(Type __class_some_module_Number(_t)?, $int\\)" {
	pass $gdb_test_name
    }
    -re -wrap "type = void \\(PTR TO \-\> \\( Type number \\), $int\\)" {
	pass $gdb_test_name
    }
}

gdb_test "ptype is_bigger" \
    "type = $logical4 \\($int, $int\\)"

gdb_test "ptype say_numbers" \
    "type = void \\($int, $int, $int\\)"

gdb_test_multiple "ptype fun_ptr" "ptype fun_ptr" {
    -re -wrap "type = PTR TO -> \\( $int \\(\\) \\(REF TO -> \\( $int \\)\\) \\)"  {
	pass $gdb_test_name
    }
    -re -wrap "type = PTR TO -> \\( $int \\(\\) \\($int\\) \\)"  {
	pass $gdb_test_name
    }
}
gdb_test "ptype say_string" \
    "type = void \\(character\\*\\(\\*\\), $intN\\)"

gdb_test "ptype say_array" \
    "type = void \\($int \\(:,:\\)\\)"
