# Copyright 2019-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDB's support for OpenMP; in particular, inserting and hitting
# breakpoints inside and outside a kernel.  This test is similar to
# break.exp except that not all the breakpoints are defined at the
# beginning.  A couple in- and out-kernel breakpoints are defined when
# we are inside the kernel.

load_lib openmp.exp

set device_list [omp_get_device_list]
if {[llength ${device_list}] == 0} {
    unsupported "target does not support OpenMP"
    return 0
}

standard_testfile single-task.cpp

if {[build_executable "failed to compile ${srcfile}" \
    ${binfile} ${srcfile} {openmp c++ debug}]} {
    return -1
}

foreach device_info "${device_list}" {
    openmp_with_intelgt_lock $device_info "cpp" {

	clean_restart ${binfile}
	if {![runto_main]} {
	    untested "Failed to run to main"
	    continue
	}

	# Set breakpoints inside and outside the kernel.
	set after_kernel [gdb_get_line_number "line-after-kernel"]
	set inside_kernel_2 [gdb_get_line_number "kernel-line-2"]
	set inside_kernel_4 [gdb_get_line_number "kernel-line-4"]

	gdb_breakpoint ${inside_kernel_2}
	gdb_continue_to_breakpoint "kernel line 2" \
	    ".*${srcfile}:${inside_kernel_2}.*"

	# Now we are inside the kernel and defining a kernel breakpoint.
	gdb_breakpoint ${inside_kernel_4}
	gdb_continue_to_breakpoint "kernel line 4" \
	    ".*${srcfile}:${inside_kernel_4}.*"

	# We are still inside the kernel and defining a host breakpoint.
	gdb_breakpoint ${after_kernel}
	gdb_continue_to_breakpoint "line after kernel" \
	    ".*${srcfile}:${after_kernel}.*"

	# Now we should be able to run to the end without hitting
	# any other kernel/non-kernel breakpoints.
	gdb_test "continue" "${inferior_exited_re} normally].*" \
	    "continue to end"
    }
}
