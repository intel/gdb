# Copyright 2019-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDB's support for OpenMP; in particular, inserting and hitting
# breakpoints inside and outside a kernel.  This test is similar to
# break.exp except that not all the breakpoints are defined at the
# beginning.  A couple in- and out-kernel breakpoints are defined when
# we are inside the kernel.

load_lib openmp.exp

if {[skip_openmp_tests]} {
    untested "skipping openmp test"
    return 0
}

standard_testfile single-task.${openmp_program_extension}

if {[start_openmp_program]} {
    return -1
}

# Set breakpoints inside and outside the kernel.
set after_kernel [gdb_get_line_number "line-after-kernel"]
set inside_kernel_1 [gdb_get_line_number "kernel-line-1"]
set inside_kernel_2 [gdb_get_line_number "kernel-line-2"]
set inside_kernel_3 [gdb_get_line_number "kernel-line-3"]
set inside_kernel_4 [gdb_get_line_number "kernel-line-4"]

gdb_breakpoint $inside_kernel_2 {message}
gdb_continue_to_breakpoint "kernel line 2" \
    ".*$srcfile:$inside_kernel_2.*"

# Now we are inside the kernel and defining a kernel breakpoint.
gdb_breakpoint $inside_kernel_4 {message}
gdb_continue_to_breakpoint "kernel line 4" \
    ".*$srcfile:$inside_kernel_4.*"

# We are still inside the kernel and defining a host breakpoint.
gdb_breakpoint $after_kernel {message}
gdb_continue_to_breakpoint "line after kernel" \
    ".*$srcfile:$after_kernel.*"

# Now we should be able to run to the end without hitting
# any other kernel/non-kernel breakpoints.
continue_openmp_program_to_termination
