# Copyright 2019-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDB's support for OpenMP; in particular, AOT compilation flags,
# inserting and hitting breakpoints inside and outside a kernel.

load_lib openmp.exp

set device_list [omp_get_device_list]
if {[llength ${device_list}] == 0} {
    unsupported "target does not support OpenMP."
    return -1
}

foreach extension ${openmp_languages_list} {
    standard_testfile "single-task.${extension}"
    set exe "${binfile}_${extension}"

    foreach device_info "${device_list}" {
	openmp_with_intelgt_lock $device_info $extension {

	    if {[require_openmp_device "GPU"]} {
		# LD and compile flags setting is needed for AOT testing.
		set aot_opts [list "additional_flags=-fopenmp-targets=spir64_gen" \
		    "ldflags=-Xopenmp-target-backend=spir64_gen \
			\"-q -device dg2-g10-a0:\""]
	    } elseif {[require_openmp_device "CPU"]} {
		set aot_opts [list "additional_flags=-fopenmp-targets=spir64_x86_64"]
	    } else {
		verbose "Skipping unknown device: ${device_info}" 0
		continue
	    }

	    if {$extension eq "cpp"} {
		set language "c++"
	    } else {
		set language $extension
	    }

	    if {[build_executable "failed to compile $srcfile" \
		"${exe}" $srcfile \
		[concat openmp $language debug "${aot_opts}"]]} {
		if {[require_openmp_device "GPU"]} {
		    kfail "JIRA GSD/3754" "${extension}: Offline compiler does not accept range of devices input for all targets."
		} else {
		    kfail "JIRA CMPLRLLVM/51578" "${extension}: AOT compilation fails for IFX."
		}
		untested "OpenMP: Fail to prepare the test for ${extension}"
		continue
	    }

	    clean_restart $exe
	    if {![openmp_run_to_main $extension]} {
		untested "Failed to run to main"
		continue
	    }

	    # Set breakpoints inside and outside the kernel.
	    array set bp_locations_kernel {}
	    set num_kernel_locations 4

	    gdb_breakpoint \
		"${srcfile}:[gdb_get_line_number line-after-kernel]" \
		{message}

	    for {set i 1} {$i <= ${num_kernel_locations}} {incr i} {
		set bp_locations_kernel($i) \
		    [gdb_get_line_number "kernel-line-$i"]
		gdb_breakpoint "${srcfile}:$bp_locations_kernel($i)" {message}
	    }

	    # Test that we actually hit the breakpoints.
	    for {set i 1} {$i <= ${num_kernel_locations}} {incr i} {
		gdb_continue_to_breakpoint "kernel line $i" \
		    ".*${srcfile}:$bp_locations_kernel($i).*"
	    }

	    gdb_continue_to_breakpoint "line after kernel" \
		".*${srcfile}:[gdb_get_line_number line-after-kernel].*"

	    # Now we should be able to run to the end without hitting
	    # any other kernel/non-kernel breakpoints.
	    gdb_test "continue" "${inferior_exited_re} normally].*" \
		"continue to end"
	}
    }
}
