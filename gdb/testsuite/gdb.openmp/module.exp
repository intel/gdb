# Copyright 2021-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests inside kernel the visibility, and evaluation of variables
# declared in modules (on host).

load_lib fortran.exp
load_lib openmp.exp

if {[skip_fortran_tests] } {
    untested "skipping openmp test"
    return 0
}

standard_testfile .f90

if ![string match -nocase "*f90*" $openmp_languages_list] {
    untested "Fortran is not enabled in openmp_languages_list"
    return 0
}

set device_list [init_omp_f90_devices_list]
if {[llength $device_list] == 0} {
    unsupported "target does not support OpenMP Fortran"
    return -1
}
set exe "${binfile}_f90"

if {[prepare_openmp_for_testing ${exe} ${srcfile} "f90"]} {
    untested "OpenMP: Fail to prepare the test ${exe}"
    return -1
}

foreach device_info "${device_list}" {
    with_test_prefix [init_openmp_device $device_info "f90"] {

	if {![start_openmp_program "f90"]} {
	    untested "Fail to start the program"
	    continue
	}

	gdb_breakpoint [gdb_get_line_number "locals-check"]
	if {![require_openmp_device "GPU"]} {
	    setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	}
	gdb_continue_to_breakpoint "locals-check" ".*locals-check.*"
	if {![require_openmp_device "GPU"]} {
	    setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	}
	gdb_test "print var_d" " = 11" "print var_d value 11"
	if {![require_openmp_device "GPU"]} {
	    setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	}
	gdb_test "print var_c" " = 12" "print var_c value 12"

	set state 0
	set int_type [fortran_int4]
	set mod_re [multi_line \
	    "\\d+:\[ \t\]+${int_type} module_declarations::var_c;" \
	    "\\d+:\[ \t\]+${int_type} module_declarations::var_d;"]

	# For GPU offload we have to switch to the host inferior to access host
	# variables.
	if {[require_openmp_device "GPU"] && [omp_is_level_zero_debug_api]} {
	    gdb_test "inferior 1" "Switching to inferior 1.*" \
		"switch to inferior 1"
	}
	gdb_test_multiple "info variables -n" "" {
	    -re "\r\nAll defined variables:" {
		if { $state == 0 } { set state 1 }
		    exp_continue
		}
	    -re "\r\n\r\nFile .*[string_to_regexp $srcfile]:" {
		if { $state == 1 } { set state 2 }
		    exp_continue
	    }
	    -re $mod_re {
		if { $state == 2 } { set state 3 }
		    exp_continue
	    }
	    -re "\r\n\r\nFile \[^\r\n\]*:" {
		exp_continue
	    }
	    -re -wrap "" {
		if { $state == 3} {
		    pass $gdb_test_name
		} else {
		    fail $gdb_test_name
		}
	    }
	}
	if {[require_openmp_device "GPU"] && [omp_is_level_zero_debug_api]} {
	    gdb_test "inferior 2" "Switching to inferior 2.*" \
		"switch to inferior 2"
	}

	gdb_breakpoint [gdb_get_line_number "args-check"]
	with_test_prefix "call1" {
	    if {![require_openmp_device "GPU"]} {
		setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	    }
	    gdb_continue_to_breakpoint "args-check" ".*args-check.*"
	    if {![require_openmp_device "GPU"]} {
		setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	    }
	    gdb_test "print val_a" " = 11" "print var_a value 11"
	}
	with_test_prefix "call2" {
	    if {![require_openmp_device "GPU"]} {
		setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	    }
	    gdb_continue_to_breakpoint "args-check" ".*args-check.*"
	    if {![require_openmp_device "GPU"]} {
		setup_kfail "JIRA CMPLRLLVM/49729" "*-*-*"
	    }
	    gdb_test "print val_a" " = 12" "print var_a value 12"
	}
    }
}
