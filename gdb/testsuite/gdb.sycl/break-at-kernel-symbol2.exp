# Copyright 2020-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test being able to set a breakpoint at the kernel symbol for a
# parallel-for kernel.

load_lib sycl.exp

standard_testfile parallel-for-1D.cpp

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global srcfile binfile gdb_prompt

    if {[start_sycl_program] < 0} {
	return -1
    }

    # Find out the symbol for the kernel.
    set inside_kernel_1 [gdb_get_line_number "kernel-first-line"]
    gdb_breakpoint "$srcfile:$inside_kernel_1" {temporary}
    gdb_continue_to_breakpoint "kernel line 1" ".*$srcfile:$inside_kernel_1.*"

    gdb_test_no_output "set print demangle off"
    set kernel_symbol ""
    gdb_test_multiple "backtrace 1" "find kernel symbol" {
	-re -wrap "#0  (\[A-Za-z0-9_\]+) \\(.*" {
	    set kernel_symbol $expect_out(1,string)
	    pass $gdb_test_name
	}
    }

    verbose -log "Kernel symbol: $kernel_symbol" 2
    if {$kernel_symbol eq ""} {
	return -1
    }

    # Now restart with a pending BP defined on the kernel symbol.
    clean_restart $binfile
    if {[start_sycl_program] < 0} {
	return -1
    }

    # On GPU, stop at the solib load event to insert the BP.
    if {[require_sycl_device "gpu" "Intel*"]} {
	set before_kernel [gdb_get_line_number "line-before-kernel"]
	gdb_breakpoint "$srcfile:$before_kernel" {temporary}
	gdb_continue_to_breakpoint "before kernel" ".*$srcfile:$before_kernel.*"
	gdb_test_no_output "set stop-on-solib-events 1"
	if {[is_level_zero_debug_api]} {
	    kfail "JIRA DOQG/2748" "stop-on-solib-events hangs"
	    return
	}
	gdb_test "continue" "Stopped due to shared library event.*" \
	    "continue until solib load"
	kfail "JIRA DOQG/2492" "stop-on-solib-events needed for kernel symbol BP"
    }

    gdb_breakpoint $kernel_symbol {allow-pending}
    set symbol_bpnum [get_integer_valueof "\$bpnum" 0 "get symbol bpnum"]

    set kernel_line [gdb_get_line_number "kernel-last-line"]
    gdb_breakpoint $srcfile:$kernel_line
    set kernel_bpnum [get_integer_valueof "\$bpnum" 0 "get kernel bpnum"]

    set program_end [gdb_get_line_number "end-marker"]
    gdb_breakpoint $srcfile:$program_end

    gdb_test_no_output "set print demangle off" "no demangling"

    # Count the number of times we hit the breakpoint defined on the
    # symbol vs. the bp defined inside the kernel.  The number of hits
    # should be equal.  Because the number of threads depends on the
    # vectorization level (i.e.  SIMD width), we do not have a hard-coded
    # check on the number of hits.

    set num_body_hits 0
    set num_symbol_hits 0
    set keep_going 1
    while {$keep_going} {
	# Assume we won't continue, to avoid an infinite loop.
	set keep_going 0

	gdb_test_multiple "continue" "continue" {
	    -re -wrap "reakpoint $symbol_bpnum.* ${kernel_symbol} .*" {
		incr num_symbol_hits
		set keep_going 1
	    }
	    -re -wrap "Breakpoint $kernel_bpnum.* $srcfile:$kernel_line.*" {
		incr num_body_hits
		set keep_going 1
	    }
	    -re -wrap "Breakpoint .*$srcfile:$program_end.*" {
		gdb_assert {$num_body_hits > 0}
		gdb_assert {$num_symbol_hits > 0}
		gdb_assert {$num_body_hits == $num_symbol_hits} "bp hits equal"
		verbose -log "body: $num_body_hits, symbol: $num_symbol_hits"
	    }
	    -re "$gdb_prompt $" {
		if {[is_level_zero_debug_api]} {
		    setup_kfail "JIRA DOQG/2748" "*-*-*"
		}
		fail "hit bps"
	    }
	}
    }
}

test_initialize
