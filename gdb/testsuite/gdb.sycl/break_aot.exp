# Copyright 2019-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDB's support for SYCL ; in particular, AOT compilation flags,
# inserting and hitting breakpoints inside and outside a kernel.

load_lib sycl.exp

standard_testfile single-task.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

foreach device $sycl_device_list {
    if {[require_sycl_device "$device" "gpu" "Intel*"]} {
	set target "gpu"
	# LD and compile flags setting is needed for AOT testing.
	# dg2-g10-a0: option creates AOT binary for dg2 and newer targets.
	set aot_opts [list \
	    "additional_flags=-fsycl-targets=spir64_gen" \
	    "ldflags=-Xsycl-target-backend=spir64_gen \
		\"-q -device dg2-g10-a0:\""]
    } elseif {[require_sycl_device "$device" "accelerator" "*"]} {
	set target "fpga"
	set aot_opts [list "additional_flags=-fsycl-targets=spir64_fpga"]
    } else {
	set target "cpu"
	set aot_opts [list "additional_flags=-fsycl-targets=spir64_x86_64"]
    }

    if {[build_executable "failed to compile $srcfile for ${target}" \
	"${binfile}_${target}" $srcfile [concat sycl debug $aot_opts]]} {
	continue
    }

    clean_restart "${binfile}_${target}"
    sycl_with_intelgt_lock $device {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Set breakpoints inside and outside the kernel.
	array set bp_locations_kernel {}
	set num_kernel_locations 4

	gdb_breakpoint "$srcfile:[gdb_get_line_number line-after-kernel]" \
	    {message}

	for {set i 1} {$i <= $num_kernel_locations} {incr i} {
	    set bp_locations_kernel($i) [gdb_get_line_number "kernel-line-$i"]
	    gdb_breakpoint "$srcfile:$bp_locations_kernel($i)" {message}
	}

	# Test that we actually hit the breakpoints.
	for {set i 1} {$i <= $num_kernel_locations} {incr i} {
	    gdb_continue_to_breakpoint "kernel line $i" \
		".*$srcfile:$bp_locations_kernel($i).*"
	}

	gdb_continue_to_breakpoint "line after kernel" \
	    ".*$srcfile:[gdb_get_line_number line-after-kernel].*"
    }
}
