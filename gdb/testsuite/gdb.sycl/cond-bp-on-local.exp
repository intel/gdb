# Copyright 2019-2024 Free Software Foundation, Inc.
# Copyright (C) 2019-2024 Intel Corporation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests conditional breakpoints in SYCL kernels.

load_lib sycl.exp

standard_testfile parallel-for-1D.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Define a conditional breakpoint with the condition set on a local
	# variable.  We pick these values:
	#   0: the most obvious one.
	#   256: a value that's divisible by 8, 16, and 32: typical SIMD widths.
	#   533: a value that's not divisible by a typical SIMD width.
	# The values are also chosen far away from each other; we expect them
	# to be covered by different threads even when threads have SIMD lanes
	# (again, assuming typical SIMD widths).
	set last_line [gdb_get_line_number "kernel-last-line"]
	set condition "\(dim0 == 0 || dim0 == 256 || dim0 == 533\)"
	gdb_breakpoint "$last_line if $condition" \
	    "Breakpoint $decimal at .*" "define the bp"

	# Also define a breakpoint at the very end of the program.
	# After hitting the conditional breakpoint 3 times, we should
	# hit this breakpoint.
	set end_marker [gdb_get_line_number "end-marker"]
	gdb_breakpoint $end_marker

	# Continue and mark the hits.
	set hit_0 0
	set hit_256 0
	set hit_533 0
	for {set i 1} {$i <= 3} {incr i} {
	    gdb_continue_to_breakpoint "hit the conditional BP, trip $i" \
		".*$srcfile:$last_line.*"

	    gdb_test_multiple "print dim0" "read dim0, trip $i" {
		-re -wrap " = 0" {
		    incr hit_0
		}
		-re -wrap " = 256" {
		    incr hit_256
		}
		-re -wrap " = 533" {
		    incr hit_533
		}
	    }
	}

	gdb_assert {$hit_0 == 1}
	gdb_assert {$hit_256 == 1}
	gdb_assert {$hit_533 == 1}

	# Continuing now should hit the end-of-program marker.
	gdb_continue_to_breakpoint "end of program" \
	    ".*$srcfile:$end_marker.*"
    }
}
