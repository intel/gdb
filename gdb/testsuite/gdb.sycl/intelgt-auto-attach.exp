# Copyright 2020-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test the auto-attach script for Intel GT by terminating/killing/detaching
# the host/gt inferior.

load_lib sycl.exp

standard_testfile single-task.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug "additional_flags=-DOMIT_REPORT"}]} {
    return -1
}

# Get host pid.

proc get_host_pid {} {
    global decimal

    set host_pid "invalid"
    gdb_test_multiple "info inferiors 1" "find host pid" {
	-re -wrap "process ($decimal).*" {
	    set host_pid $expect_out(1,string)
	    pass $gdb_test_name
	}
    }

    verbose -log "host pid is $host_pid"
    return $host_pid
}

# Count available inferiors within the current debugging session.

proc total_inferiors {} {
    set output  ""
    gdb_test_multiple "info inferiors" "check for existing inferiors" {
	-re -wrap "(1.*process.*)\r\nType.*" {
	    set output $expect_out(1,string)
	}
    }

    set out_list [split $output "\n"]
    set total_inf [llength $out_list]

    verbose -log "Total inferiors: $total_inf"
    return $total_inf
}

# Prepare for restart, kill-host and detach-host scenarios.

proc prepare_nonstop_test_scenario {non_stop_mode device} {
    global srcfile

    gdb_test_no_output "set non-stop $non_stop_mode"

    if {![runto_main [sycl_get_device_args $device]]} {
	fail "run the program"
    } else {
	pass "run the program"
    }

    # Remove the breakpoint set for main, since we want to restart.
    delete_breakpoints

    # Set a breakpoint inside the kernel and hit it.
    set inside_kernel [gdb_get_line_number "kernel-line-1"]
    gdb_breakpoint "$srcfile:$inside_kernel"
    gdb_continue_to_breakpoint "kernel line" \
	".*$srcfile:$inside_kernel.*"
}

# Run until the end, potentially with BPs inside and outside the kernel.

proc run_end_to_end {has_kernel_bp has_outside_bp device} {
    global srcfile

    if {![runto_main [sycl_get_device_args $device]]} {
	fail "run the program"
    } else {
	pass "run the program"
    }

    if {$has_kernel_bp} {
	set kernel_bp [gdb_get_line_number "kernel-line-3"]
	gdb_breakpoint $kernel_bp

	gdb_continue_to_breakpoint "inside the kernel" \
	    ".*$srcfile:$kernel_bp.*"
    }
    if {$has_outside_bp} {
	set end_bp [gdb_get_line_number "return-stmt"]
	gdb_breakpoint $end_bp

	gdb_continue_to_breakpoint "outside the kernel" \
	    ".*$srcfile:$end_bp.*"
    }

    continue_sycl_program_to_termination
}

# Run up to a BP, then kill/detach an inferior.

proc run_to_bp {which_bp scenario iter device} {
    global srcfile

    if {![runto_main [sycl_get_device_args $device]]} {
	fail "run the program"
    } else {
	pass "run the program"
    }

    if {$which_bp eq "inside"} {
	set kernel_bp [gdb_get_line_number "kernel-line-3"]
	gdb_breakpoint $kernel_bp

	gdb_continue_to_breakpoint "inside the kernel" \
	    ".*$srcfile:$kernel_bp.*"
    } else {
	set end_bp [gdb_get_line_number "return-stmt"]
	gdb_breakpoint $end_bp

	gdb_continue_to_breakpoint "outside the kernel" \
	    ".*$srcfile:$end_bp.*"
    }

    # Host inferior ID is always 1.
    set host_inf 1
    set host_pid [get_host_pid]
    set total_inf [total_inferiors]

    # GT inferior is created anew each time we run.
    set gt_inf [expr $iter * ($total_inf - 1) + 1]
    set fill "\[^\r\n\]*"

    set output ".*inferior $gt_inf $fill has been removed.*"
    if {$scenario eq "kill_host"} {
	gdb_test "kill inferiors $host_inf" $output
    } elseif {$scenario eq "detach_host"} {
	gdb_test "detach inferiors $host_inf" $output
	# Detaching from the host program may leave it hanging if the
	# kernel fails to resume/kill the context.  Make sure that it
	# does not stay in the background.
	remote_exec build "kill -9 ${host_pid}"
    } elseif {$scenario eq "detach_gt"} {
	gdb_test "detach inferiors $gt_inf" $output
    }
}

# Test restarting the host and gt inferior while debugging a kernel.
# Run up to a BP and try to restart the gt inferior, which should fail.  Then,
# switch to the host inferior and restart execution.  Do this with non-stop
# mode set to either "on" or "off".

proc run_restart_scenario {non_stop_mode device} {
    global srcfile inferior_exited_re gdb_prompt

    prepare_nonstop_test_scenario $non_stop_mode $device

    if {$non_stop_mode eq "on"} {
	# In non-stop mode we should still sit at the host inferior.
	gdb_test "inferior 2" "Switching to inferior 2.*" "switch to gt inferior"
    }

    # Restarting the gt inferior is disabled.
    gdb_test "run" \
	"The \"(?:extended-)?remote\" target does not support \"run\"\.  Try \"help target\" or \"continue\"\." \
	"run for gt inferior is disabled"

    gdb_test "inferior 1" "Switching to inferior 1.*" "switch to host inferior"

    # Now try to "run".  We should restart and hit the breakpoint inserted
    # earlier again.
    set inside_kernel [gdb_get_line_number "kernel-line-1"]
    gdb_test "run" "Starting program:.*$srcfile:$inside_kernel.*" \
	"restart host inferior and hit kernel bp" \
	{Start it from the beginning\? \(y or n\) } "y"

    if {$non_stop_mode eq "on"} {
	gdb_test_multiple "continue -a" "continue to end" {
	    -re "$inferior_exited_re normally].*$gdb_prompt.*" {
		pass $gdb_test_name
	    }
	}
    } else {
	# We should now be able to run to the end.
	continue_sycl_program_to_termination
    }
}

# Test detaching from the host while debugging a kernel.  
# Run up to a BP, and switch to the host inferior.  Then detach from 
# the host inferior to observe gt inferior is removed.  Do this
# with non-stop mode set to either "on" or "off".

proc run_detach_host_scenario {non_stop_mode device} {
    global decimal

    prepare_nonstop_test_scenario $non_stop_mode $device
    # Host inferior is always the first one.
    gdb_test "inferior 1" "Switching to inferior 1.*" "switch to host inferior"
    # Obtain host proc pid.
    set host_pid [get_host_pid]

    # Detach host inferior and observe device inferior is removed.
    gdb_test "detach inferiors 1" \
	"intelgt\\\: inferior $decimal \\(gdbserver\\-(?:ze\|gt)\\) has been removed.*" \
	"detaching host inferior"
    # Detaching from the host program may leave it hanging if the
    # kernel fails to resume/kill the context.  Make sure that it
    # does not stay in the background.
    remote_exec build "kill -9 ${host_pid}"
}

# Test killing the host while debugging a kernel.  
# Run up to a BP, and switch to the host inferior.  Then kill 
# the host inferior to observe gt inferior is removed.  Do this
# with non-stop mode set to either "on" or "off".

proc run_kill_host_scenario {non_stop_mode device} {
    global decimal

    prepare_nonstop_test_scenario $non_stop_mode $device
    # Host inferior is always the first one.
    gdb_test "inferior 1" "Switching to inferior 1.*" "switch to host inferior"

    # Kill host inferior and observe device inferior is removed.
    gdb_test "kill inferiors 1" \
	"intelgt\\\: inferior $decimal \\(gdbserver\\-(?:ze\|gt)\\) has been removed.*" \
	"killing host inferior"
}

# Check for handling of auto attach disable.

proc run_to_end_autoattach_disable {device} {
    global inferior_exited_re

    if {![runto_main [sycl_get_device_args $device]]} {
	return
    }

    gdb_test_no_output "set env INTELGT_AUTO_ATTACH_DISABLE=1"
    gdb_test "show env INTELGT_AUTO_ATTACH_DISABLE" \
	"INTELGT_AUTO_ATTACH_DISABLE = 1"

    gdb_test_multiple "continue" "run without starting gdbserver" {
	-re -wrap "intelgt: gdbserver-ze started for process..*" {
	    fail $gdb_test_name
	}
	-re -wrap "$inferior_exited_re normally].*" {
	    pass $gdb_test_name
	}
	-re -wrap "$inferior_exited_re with code.*" {
	    fail $gdb_test_name
	}
    }
}

# Check for handling of auto attach error diagnostic messages.

proc run_to_end_autoattach_check_errors {device quit} {
    global inferior_exited_re

    if {![runto_main [sycl_get_device_args $device]]} {
	return
    }

    gdb_test_no_output "set env ZET_ENABLE_PROGRAM_DEBUGGING=0"
    gdb_test "show env ZET_ENABLE_PROGRAM_DEBUGGING" \
	"ZET_ENABLE_PROGRAM_DEBUGGING = 0"

    set has_failure 1
    set error_captured 0
    gdb_test_multiple "continue" "continue" {
	-re "Set 'ZET_ENABLE_PROGRAM_DEBUGGING=1' in host process environment.\r\n" {
	    set error_captured 1
	    exp_continue
	}
	-re "Quit anyway\\? \\(y or n\\) $" {
	    if {$quit} {
		send_gdb "y\n"
		if {$error_captured} {
		    set has_failure 0
		}
	    } else {
		send_gdb "n\n"
		exp_continue
	    }
	}
	-re -wrap "$inferior_exited_re normally].*" {
	    if {!$quit && $error_captured} {
		set has_failure 0
	    }
	}
	-re -wrap "$inferior_exited_re with code.*" {
	    set has_failure 1
	}
    }

    gdb_assert {$has_failure == 0}
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Re-run multiple times until termination, with and without
	# inside/outside BPs.
	foreach_with_prefix has_kernel_bp {0 1} {
	    foreach_with_prefix has_outside_bp {0 1} {
		clean_restart $binfile
		foreach_with_prefix iter {1 2 3} {
		    run_end_to_end $has_kernel_bp $has_outside_bp $device
		}
	    }
	}

	# Re-run multiple times, where either the host or the gt inferior
	# is killed/detached.
	foreach_with_prefix which_bp {inside outside} {
	    foreach_with_prefix scenario {kill_host detach_host detach_gt} {
		clean_restart $binfile
		foreach_with_prefix iter {1 2 3} {
		    run_to_bp $which_bp $scenario $iter $device
		}
	    }
	}

	# Run the restart, detach host and kill host scenarios
	# for non-stop mode enabled and disabled.
	foreach_with_prefix non_stop_mode {"off" "on"} {
	    clean_restart $binfile
	    with_test_prefix "restart_scenario" {
		run_restart_scenario $non_stop_mode $device
	    }
	    with_test_prefix "detach_host_scenario" {
		run_detach_host_scenario $non_stop_mode $device
	    }
	    with_test_prefix "kill_host_scenario" {
		run_kill_host_scenario $non_stop_mode $device
	    }
	}

	# Run the program to end by disabling auto attach to
	# test that gdbserver-ze is not started.
	with_test_prefix "auto_attach_disabled" {
	    clean_restart $binfile
	    run_to_end_autoattach_disable $device
	}

	# Run the program to end by disabling mandatory configuration
	# for GPU offload.  Test if auto attach script prints warning
	# accordingly and finally test with and without force quit.
	foreach_with_prefix quit {true false} {
	    clean_restart $binfile
	    run_to_end_autoattach_check_errors $device $quit
	}
    }
}
