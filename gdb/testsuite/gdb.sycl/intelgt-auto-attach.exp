# Copyright 2020-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test the auto-attach script for Intel GT by terminating/killing/detaching
# the host/gt inferior.

load_lib sycl.exp

standard_testfile single-task.cpp

# Count available inferiors within the current debugging session.

proc total_inferiors {} {
    set output  ""
    gdb_test_multiple "info inferiors" "check for existing inferiors" {
	-re -wrap "(1.*process.*)\r\nType.*" {
	    set output $expect_out(1,string)
	}
    }

    set out_list [split $output "\n"]
    set total_inf [llength $out_list]

    verbose -log "Total inferiors: $total_inf"
    return $total_inf
}

# Run until the end, potentially with BPs inside and outside the kernel.

proc run_end_to_end {has_kernel_bp has_outside_bp} {
    global srcfile

    if {[start_sycl_program] < 0} {
	fail "run the program"
    } else {
	pass "run the program"
    }

    if {$has_kernel_bp} {
	set kernel_bp [gdb_get_line_number "kernel-line-3"]
	gdb_breakpoint $kernel_bp

	gdb_continue_to_breakpoint "inside the kernel" \
	    ".*$srcfile:$kernel_bp.*"
    }
    if {$has_outside_bp} {
	set end_bp [gdb_get_line_number "return-stmt"]
	gdb_breakpoint $end_bp

	gdb_continue_to_breakpoint "outside the kernel" \
	    ".*$srcfile:$end_bp.*"
    }

    continue_sycl_program_to_termination
}

# Run up to a BP, then kill/detach an inferior.

proc run_to_bp {which_bp scenario iter} {
    global srcfile decimal

    if {[start_sycl_program] < 0} {
	fail "run the program"
    } else {
	pass "run the program"
    }

    if {$which_bp eq "inside"} {
	set kernel_bp [gdb_get_line_number "kernel-line-3"]
	gdb_breakpoint $kernel_bp

	gdb_continue_to_breakpoint "inside the kernel" \
	    ".*$srcfile:$kernel_bp.*"
    } else {
	set end_bp [gdb_get_line_number "return-stmt"]
	gdb_breakpoint $end_bp

	gdb_continue_to_breakpoint "outside the kernel" \
	    ".*$srcfile:$end_bp.*"
    }

    # Host inferior ID is always 1.
    set host_inf 1
    set host_pid "invalid"
    gdb_test_multiple "info inferiors 1" "find host pid" {
	-re -wrap "process ($decimal).*" {
	    set host_pid $expect_out(1,string)
	    pass $gdb_test_name
	}
    }
    verbose -log "host pid is $host_pid"
    set total_inf [total_inferiors]

    # GT inferior is created anew each time we run.
    set gt_inf [expr $iter * ($total_inf - 1) + 1]
    set fill "\[^\r\n\]*"

    set output ".*inferior $gt_inf $fill has been removed.*"
    if {$scenario eq "kill_host"} {
	gdb_test "kill inferiors $host_inf" $output
    } elseif {$scenario eq "detach_host"} {
	gdb_test "detach inferiors $host_inf" $output
	# Detaching from the host program may leave it hanging if the
	# kernel fails to resume/kill the context.  Make sure that it
	# does not stay in the background.
	remote_exec build "kill -9 ${host_pid}"
    } elseif {$scenario eq "detach_gt"} {
	gdb_test "detach inferiors $gt_inf" $output
    }
}

# Test restarting the host and gt inferior while debugging a kernel.
# Run up to a BP and try to restart the gt inferior, which should fail.  Then,
# switch to the host inferior and restart execution.  Do this with non-stop
# mode set to either "on" or "off".

proc run_restart_scenario {non_stop_mode} {
    global srcfile inferior_exited_re gdb_prompt

    gdb_test_no_output "set non-stop $non_stop_mode"

    if {[start_sycl_program] < 0} {
	fail "run the program"
	return -1
    } else {
	pass "run the program"
    }

    # Remove the breakpoint set for main, since we want to restart.
    delete_breakpoints

    # Set a breakpoint inside the kernel and hit it.
    set inside_kernel [gdb_get_line_number "kernel-line-1"]
    gdb_breakpoint "$srcfile:$inside_kernel"
    gdb_continue_to_breakpoint "kernel line" \
	".*$srcfile:$inside_kernel.*"

    if {$non_stop_mode eq "on"} {
	# In non-stop mode we should still sit at the host inferior.
	gdb_test "inferior 2" "Switching to inferior 2.*" "switch to gt inferior"
    }

    # Restarting the gt inferior is disabled.
    gdb_test "run" \
	"The \"(?:extended-)?remote\" target does not support \"run\"\.  Try \"help target\" or \"continue\"\." \
	"run for gt inferior is disabled"

    gdb_test "inferior 1" "Switching to inferior 1.*" "switch to host inferior"

    # Now try to "run".  We should restart and hit the breakpoint inserted
    # earlier again.
    gdb_test "run" "Starting program:.*$srcfile:$inside_kernel.*" \
	"restart host inferior and hit kernel bp" \
	{Start it from the beginning\? \(y or n\) } "y"

    if {$non_stop_mode eq "on"} {
	gdb_test_multiple "continue -a" "continue to end" {
	    -re "$inferior_exited_re normally].*$gdb_prompt.*" {
		pass $gdb_test_name
	    }
	}
    } else {
	# We should now be able to run to the end.
	continue_sycl_program_to_termination
    }
}

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global binfile

    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    # Re-run multiple times until termination, with and without
    # inside/outside BPs.
    foreach_with_prefix has_kernel_bp {0 1} {
	foreach_with_prefix has_outside_bp {0 1} {
	    clean_restart $binfile
	    foreach_with_prefix iter {1 2 3} {
		run_end_to_end $has_kernel_bp $has_outside_bp
	    }
	}
    }

    # Re-run multiple times, where either the host or the gt inferior
    # is killed/detached.

    foreach_with_prefix which_bp {inside outside} {
	foreach_with_prefix scenario {kill_host detach_host detach_gt} {
	    clean_restart $binfile
	    foreach_with_prefix iter {1 2 3} {
		run_to_bp $which_bp $scenario $iter
	    }
	}
    }

    # Run the restart scenario for non-stop mode enabled and disabled.

    foreach_with_prefix non_stop_mode {"off" "on"} {
	clean_restart $binfile
	run_restart_scenario $non_stop_mode
    }
}

test_initialize "additional_flags=-DOMIT_REPORT"
