# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests whether info inferiors command displayes multiple intelgt devices.

load_lib sycl.exp

standard_testfile multi-device-single-task.cpp

# Helper joining all ARGS with WS inbetween and at the end.
proc wrap_regex_with_spaces_and_tabs { args } {
    set ws "\[ \\t\]+"
    return "[join ${args} ${ws}]${ws}"
}

# Execute TEST with name TEST_NAME and expect a table with 1
# TABLE_HEADER row at the top and N_BODY rows TABLE_BODY.
proc test_table_n_entries { test test_name table_header table_body n_body last_line } {
    gdb_test "${test}" \
	[multi_line \
	    "${table_header}" \
	    "(${table_body}(\r\n)?){$n_body}" \
	    "${last_line}"
	    ] "${test_name}"
}


# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global srcfile hex decimal

    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    if {[start_sycl_program] < 0} {
	return -1
    }

    set num_devices_check [gdb_get_line_number "num-devices-check"]
    set devices_driver_check [gdb_get_line_number "devices-driver-check"]
    gdb_breakpoint $num_devices_check {temporary}
    gdb_breakpoint $devices_driver_check {temporary}
    gdb_continue_to_breakpoint "num devices check" \
	".*$srcfile:$num_devices_check.*"

    set num_devices [get_integer_valueof "num_devices" 0]
    if {$num_devices < 2} {
	unsupported "test is aimed at multi-device machines"
	return 0
    }

    gdb_continue_to_breakpoint "devices driver check" \
	".*$srcfile:$devices_driver_check.*"
    set devices_same_driver [get_integer_valueof "devices_same_driver" 0]
    if {$devices_same_driver == 0} {
	unsupported "test needs to be run using devices via one driver only"
	return 0
    }

    set bp [gdb_get_line_number "kernel-line-1"]
    gdb_breakpoint $bp
    set end_bp [gdb_get_line_number "end-marker"]
    gdb_breakpoint $end_bp

    set any_name "\[^\r\n\]+"
    set any_path "\(?:\/${any_name}\)+"
    set any_location "\\\[\[0-9a-f\]{2}:\[0-9a-f\]\{2\}\.${decimal}\\\]"

    set table_header_line [wrap_regex_with_spaces_and_tabs " " "Num" \
	"Description" "Connection" "Executable"]
    set table_empty_inferior_line [wrap_regex_with_spaces_and_tabs "." "1" \
	"<null>" "${any_path}"]
    set table_inferior_line [wrap_regex_with_spaces_and_tabs "." "1" \
	"process ${decimal}" "1 \\(native\\)" "${any_path}"]
    set table_device_line [wrap_regex_with_spaces_and_tabs "." "${decimal}" \
	"device ${any_location}(\.${decimal})?" \
	"2 \\(\[^\r\n\]*remote gdbserver\[^\r\n\]*\\)"]
    set table_info_devices_hint_line \
	"Type \"info devices\" to see details of the devices\."

    # (gdb) info inferiors
    #   Num  Description            Connection                  Executable
    #   1    process 40678          1 (native)                  /XXX/XXX/XXX/XXX
    #   2    device [03:00.0].0     2 (...remote gdbserver...)
    # * 3    device [00:02.0].0     2 (...remote gdbserver...)
    # Type \"info devices\" to see details of the devices.

    gdb_test "info devices" "No devices\." "info devices pre-kernel"

    # For each device one bp should be hit and each call to continue should lead to
    # one more inferior and one more inferior being displayed.

    set table_header_extended_info_line \
	"${table_header_line}\r\n${table_inferior_line}"

    for {set trip 1} {$trip <= $num_devices} {incr trip} {
	with_test_prefix "trip $trip" {
	    gdb_test_multiple "continue" "resume" {
		-re -wrap ".*$srcfile:$bp.*" {

		    # The nth run should display n inferiors (TRIP).
		    test_table_n_entries "info inferiors" \
			"info inferiors in kernel for ${trip} devices" \
			"${table_header_extended_info_line}" \
			"${table_device_line}" "${trip}" \
			"${table_info_devices_hint_line}"
		}
	    }
	}
    }

    # Here all device inferiors should have been detected and all inferiors should
    # be visible.
    gdb_continue_to_breakpoint "post-kernel bp" ".*$srcfile:$end_bp.*"
    test_table_n_entries "info inferiors" \
	"info inferiors post kernel for all ${num_devices} devices" \
	"${table_header_extended_info_line}" \
	"${table_device_line}" "${num_devices}" \
	"${table_info_devices_hint_line}"

    test_table_n_entries "info inferiors 1-2" \
	"info inferiors post kernel for 1-2 inferiors" \
	"${table_header_extended_info_line}" \
	"${table_device_line}" "1" \
	"${table_info_devices_hint_line}"

    continue_sycl_program_to_termination

    # Receiving inferior 1's exit event before inferior 2's and 3's:
    # (gdb) info inferiors
    #   Num  Description            Connection                  Executable
    # * 1    <null>                                             XXXXXXXX
    #
    # Or, receiving inferior 2's exit event first:
    #
    #   Num  Description            Connection                  Executable
    # * 1    process 40678          1 (native)                  /XXX/XXX/XXX/XXX
    #   3    device [00:02.0].0     2 (...remote gdbserver...)
    # Type \"info devices\" to see details of the devices.
    #
    # Or, receiving inferior 3's exit event first:
    #
    #   Num  Description            Connection                  Executable
    #   1    process 40678          1 (native)                  /XXX/XXX/XXX/XXX
    #   2    device [03:00.0].0     2 (...remote gdbserver...)
    # Type \"info devices\" to see details of the devices.

    set test "info inferiors after program exit"
    gdb_test_multiple "info inferiors" $test {
	-re -wrap "${table_header_line}\r\n${table_empty_inferior_line}" {
	    pass $test
	}
	-re -wrap "${table_header_line}\r\n${table_inferior_line}\r\n${table_info_devices_hint_line}" {
	    pass $test
	}
    }
}

test_initialize
