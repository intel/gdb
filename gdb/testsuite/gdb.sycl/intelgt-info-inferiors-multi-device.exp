# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests whether info inferiors command displayes multiple intelgt devices.

load_lib sycl.exp

standard_testfile multi-device-single-task.cpp

# Helper joining all ARGS with WS inbetween and at the end.
proc wrap_regex_with_spaces_and_tabs { args } {
    set ws "\[ \\t\]+"
    return "[join ${args} ${ws}]${ws}"
}

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {

    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![is_level_zero_debug_api]} {
	    unsupported "test is aimed at Level-Zero Debug API only"
	    continue
	}

	clean_restart "${binfile}"

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set num_devices_check [gdb_get_line_number "num-devices-check"]
	set devices_driver_check [gdb_get_line_number "devices-driver-check"]
	gdb_breakpoint $num_devices_check {temporary}
	gdb_breakpoint $devices_driver_check {temporary}
	gdb_continue_to_breakpoint "num devices check" \
	    ".*$srcfile:$num_devices_check.*"

	set num_devices [get_integer_valueof "num_devices" 0]
	if {$num_devices < 2} {
	    unsupported "test is aimed at multi-device machines"
	    continue
	}

	gdb_continue_to_breakpoint "devices driver check" \
	    ".*$srcfile:$devices_driver_check.*"
	set devices_same_driver [get_integer_valueof "devices_same_driver" 0]
	if {$devices_same_driver == 0} {
	    unsupported "test needs to be run using devices via one driver only"
	    continue
	}

	set bp [gdb_get_line_number "kernel-line-1"]
	gdb_breakpoint $bp
	set end_bp [gdb_get_line_number "end-marker"]
	gdb_breakpoint $end_bp

	set any_name "\[^\r\n\]+"
	set any_path "\(?:\/${any_name}\)+"
	set any_location "\\\[\[0-9a-f\]{2}:\[0-9a-f\]\{2\}\.${decimal}\\\]"

	set table_header_line [wrap_regex_with_spaces_and_tabs " " "Num" \
	    "Description" "Connection" "Executable"]
	set table_empty_inferior_line [wrap_regex_with_spaces_and_tabs "." "1" \
	    "<null>" "${any_path}"]
	set table_inferior_line [wrap_regex_with_spaces_and_tabs "." "1" \
	    "process ${decimal}" "1 \\(native\\)" "${any_path}"]
	set device_line [wrap_regex_with_spaces_and_tabs \
	    "${decimal}" "device ${any_location}(\.${decimal})?" \
	    "2 \\(.*remote \\| .*gdbserver.*\\)"]
	set table_device_line [wrap_regex_with_spaces_and_tabs "." $device_line]
	set table_active_device_line [wrap_regex_with_spaces_and_tabs "\\*" $device_line]
	set table_info_devices_hint_line \
	    "Type \"info devices\" to see details of the devices\."

	# Example of multi-tile output:
	#
	# info inferiors
	#   Num  Description              Connection                                  Executable
	#   1    process 764868           1 (native)                                  /XXX/XXX/XXX/XXX
	# * 2    device [3a:00.0].0       2 (...remote | gdbserver...)
	#   3    device [3a:00.0].1       2 (...remote | gdbserver...)
	#   4    device [9a:00.0].0       2 (...remote | gdbserver...)
	#   5    device [9a:00.0].1       2 (...remote | gdbserver...)
	# Type "info devices" to see details of the devices.
	#
	# Example of a single-tile output:
	#
	# info inferiors
	#   Num  Description              Connection                                  Executable
	#   1    process 764868           1 (native)                                  /XXX/XXX/XXX/XXX
	# * 2    device [37:00.0]         2 (...remote | gdbserver...)
	#   3    device [3b:00.0]         2 (...remote | gdbserver...)

	gdb_test "info devices" "No devices\." "info devices pre-kernel"

	# For each device one bp should be hit and each call to continue
	# should lead to switching to a different device inferior.

	set table_header_extended_info_line \
	    "${table_header_line}\r\n${table_inferior_line}"

	set subdevices 0
	for {set trip 0} {$trip < $num_devices} {incr trip} {
	    with_test_prefix "trip $trip" {
		gdb_test_multiple "continue" "resume" {
		    -re -wrap ".*$srcfile:$bp.*" {

			set lines_list [list \
			    "${table_header_line}" \
			    "${table_active_device_line}" \
			    "${table_info_devices_hint_line}"]

			# Get the number of sub-devices.
			set subdevices [get_integer_valueof "subdevices_count" 0]

			# Compute the current inferior id.
			set current_inf [expr $trip + 2]

			# LAST_DEVICE_INF represents the last inferior id of the current device.
			set last_device_inf $current_inf
			if { $subdevices > 0 } {
			    set current_inf [expr $trip * $subdevices + 2]
			    set last_device_inf [expr $current_inf + $subdevices - 1]
			    # Insert the additional sub-devices lines.
			    set lines_list [linsert \
				$lines_list 2 "(${table_device_line}(\r\n)?){[expr $subdevices - 1]}"]
			}

			gdb_test "info inferiors ${current_inf}-${last_device_inf}" \
			    [multi_line {*}$lines_list] \
			    "info inferiors in kernel for device ${trip}"
		    }
		}
	    }
	}

	# Display all available inferiors at the post-kernel breakpoint.
	gdb_continue_to_breakpoint "post-kernel bp" ".*$srcfile:$end_bp.*"

	gdb_test "info inferiors" \
	    [multi_line \
		"${table_header_extended_info_line}" \
		"(${table_device_line}(\r\n)?){$num_devices,}" \
		"${table_info_devices_hint_line}"
		] "info inferiors post kernel for all ${num_devices} (sub)devices"

	continue_sycl_program_to_termination

	# All inferiors should disappear after the program finishes.
	# (gdb) info inferiors
	#   Num  Description            Connection                  Executable
	# * 1    <null>                                             XXXXXXXX

	# set test "info inferiors after program exit"
	gdb_test "info inferiors" \
	    "${table_header_line}\r\n${table_empty_inferior_line}" \
	    "info inferiors after program exit"
    }
}
