# Copyright 2021-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test the ability to resume the kernel running on an Intel GPU when
# the schedule-multiple setting is off.

load_lib sycl.exp

standard_testfile parallel-for-1D.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {

    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	clean_restart "${binfile}"

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set bp [gdb_get_line_number "first-line"]
	gdb_breakpoint "$bp" {temporary}
	gdb_continue_to_breakpoint "the bp" ".*$srcfile:$bp.*"

	# Count the number of devices.
	set num_devices 0
	gdb_test_multiple "info devices" "info devices" {
	    -re "Location\[^\r\n\]+\r\n" {
		exp_continue
	    }
	    -re "\[^\r\n\]+Intel\[^\r\n\]+\r\n" {
		incr num_devices
		exp_continue
	    }
	    -re "^$gdb_prompt $" {
		pass $gdb_test_name
	    }
	}

	# We cannot resume devices individually on an all-stop target.
	if {$num_devices > 1} {
	    untested "test can handle single-device cases only"
	    continue
	}

	# The auto-attach script sets schedule-multiple to on.
	# Turn it off and resume the inferiors individually.
	gdb_test_no_output "set schedule-multiple off"

	# Switch to the host inferior.  Resume it.  It will wait for
	# kernel termination.
	gdb_test "inferior 1" "Switching to inferior 1.*"
	gdb_test "continue &" "Continuing\." "resume host"

	# The other inferior is the kernel.  Resuming it sends to the GT target
	# a resume ptid of the form (P, -1, 0) instead of (-1, 0, 0) because
	# schedule-multiple is off.  This should still be handled fine, all
	# GPU threads should be resumed, and the program should reach
	# termination.
	gdb_test "inferior 2" "Switching to inferior 2.*"
	continue_sycl_program_to_termination
    }
}
