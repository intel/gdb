# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests the intelgt target's handling of stepping.
#
# In this scenario we start stepping for a thread and resume the
# others.  There is a breakpoint close to the current PC.  We expect
# other threads to hit that BP before the current thread finishes
# stepping its range.  Hence, the step flow would be broken and
# canceled.  We should be able to resume the thread without problems.

load_lib sycl.exp

standard_testfile parallel-for-1D.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set first_line [gdb_get_line_number "kernel-first-line"]
	set next_line [expr $first_line + 1]
	gdb_breakpoint $first_line {temporary}

	# Explicitly control the scheduler-locking setting.
	gdb_test_no_output "set scheduler-locking off"

	gdb_continue_to_breakpoint "hit the first line" \
	    ".*$srcfile:$first_line.*"
	gdb_breakpoint $next_line

	set first_thread [get_integer_valueof "\$_thread" 0 "get tid"]

	# Now only the second BP is there.  The "step" command will
	# start a stepping flow for the first thread whereas it will
	# resume the others.  We expect the others to hit the BP,
	# because it is very close to our current PC, but of course
	# there is a slight chance that this will not happen and the
	# first thread will win the race.
	gdb_test "step" "$srcfile:$next_line.*" "start stepping"
	set second_thread [get_integer_valueof "\$_thread" 0 "get tid again"]

	if {$first_thread eq $second_thread} {
	    # There was really a very very low chance of this happening.
	    untested "test condition could not be satisfied"
	    continue
	}

	# Resume the first thread only.  It should hit the second BP
	# normally.
	gdb_test_no_output "set scheduler-locking on"
	gdb_test "thread $first_thread" ".*" "switch to the first thread"
	gdb_continue_to_breakpoint "resume the thread" \
	    ".*$srcfile:$next_line.*"

	gdb_test "print \$_thread == ${first_thread}" " = true" \
	    "sanity-check the current thread"
    }
}
