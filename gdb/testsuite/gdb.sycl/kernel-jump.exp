# Copyright 2020-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test being able to check the jump command inside the kernel.
# Scenario:
#     - Define a breakpoint at "kernel-line-3" in the "single-task.cpp" file
#     - Continue the program to that line
#     - Define a breakpoint at "kernel-line-2"
#     - Use the "jump" command to jump backward to "kernel-line-1"
#     - The breakpoint at line "kernel-line-2" should be hit
#     - Then, the continue command should hit the "kernel-line-3"

load_lib sycl.exp

standard_testfile single-task.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set inside_kernel_1 [gdb_get_line_number "kernel-line-1"]
	set inside_kernel_2 [gdb_get_line_number "kernel-line-2"]
	set inside_kernel_3 [gdb_get_line_number "kernel-line-3"]

	gdb_breakpoint "$srcfile:$inside_kernel_3"
	gdb_continue_to_breakpoint "kernel line 3" \
	    ".*$srcfile:$inside_kernel_3.*"

	gdb_breakpoint "$srcfile:$inside_kernel_2"

	gdb_test "jump ${inside_kernel_1}" ".*Breakpoint.* $srcfile:$inside_kernel_2.*" \
	    "Jump to line 1 before the BP"

	gdb_continue_to_breakpoint "hit breakpoint at line 3 again" \
	    ".*$srcfile:$inside_kernel_3.*"

	# Continue until termination
	continue_sycl_program_to_termination
    }
}
