# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Check write pagefault detection.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {

    sycl_with_intelgt_lock $device {
	if {![require_sycl_device "$device" "gpu" "Intel*"]
	    || ![is_pvc $device]} {
	    unsupported "test requires a GPU with pagefault support"
	    continue
	}

	clean_restart "${binfile}"

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	if {[is_dg2 $device] || [is_atsm $device] || [is_pvc $device]} {
	    setup_kfail "JIRA IGC/8265" "*-*-*"
	}
	gdb_test "continue" "signal SIGSEGV, Segmentation fault.*"
    }

    # Single-stepping over a page-faulting instruction should report
    # the SIGSEGV.
    clean_restart "${binfile}"
    sycl_with_intelgt_lock $device { with_test_prefix "stepping" {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set pagefault_line [gdb_get_line_number "pagefault-line"]
	gdb_breakpoint "$pagefault_line"
	gdb_continue_to_breakpoint "pagefault line" \
	    "$srcfile:$pagefault_line.*"

	gdb_test_no_output "set scheduler-locking step"

	set pagefault_seen 0
	set iter 1
	while {$iter > 0} {
	    gdb_test_multiple "stepi" "step $iter" {
		-re -wrap "signal SIGSEGV, Segmentation fault.*" {
		    set pagefault_seen 1
		    set iter 0
		}
		-re -wrap "dummy-line.*" {
		    # Stepped over all the instructions on the
		    # pagefaulting line.  We are done.
		    set iter 0
		}
		-re -wrap ".*" {
		    # An ordinary instruction was stepped.  Keep going.
		    incr iter
		}
	    }
	}
	gdb_assert {$pagefault_seen} "saw the pagefault"
    }}
}
