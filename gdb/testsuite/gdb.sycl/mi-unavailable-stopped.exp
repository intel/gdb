# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for the stopped event generated by an unavailable thread.

load_lib sycl.exp

standard_testfile parallel-for-1D.cpp

set MIFLAGS "-i=mi"

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
	 "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	mi_clean_restart $binfile
	if {![mi_runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Run till a temporary BP inside a kernel.
	set last_kernel_line [gdb_get_line_number "kernel-last-line"]
	set continue_test "Continue to 'kernel_last_line' and stop at breakpoint"
	mi_continue_to_line $last_kernel_line $continue_test

	mi_gdb_test "-gdb-set scheduler-locking step on" ".*done.*"

	set test_name "got non-empty stopped event for unavailable thread"
	for {set i 0} {$i < 10} {incr i} {
	    send_gdb "next\n"
	    gdb_expect {
		-re "stopped,reason=\"unavailable\",thread-id=\"$decimal\".*$mi_gdb_prompt$" {
		    pass $test_name
		    break
		}
		-re "stopped,reason.*$mi_gdb_prompt$" {
		    # Ignore a normal stopped and proceed to the next iteration.
		}
		timeout {
		    fail $test_name
		    break
		}
	    }
	}
	gdb_assert {$i < 10} "stepped through kernel end"
    }
}
