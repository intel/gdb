# Copyright 2022-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests a breakpoint hits count on debugging kernels running
# asynchronously on two different devices.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

# The kernels are submitted asynchronously and are not dependent on
# each other.  Use the value of the "dev_idx" variable to distinguish
# the device.

proc get_device {} {
    set index_value [get_integer_valueof "dev_idx" -1]
    return $index_value
}

set devices_count 0

# Run all tests
proc test_multi_device {} {
    global srcfile devices_count

    set num_devices_check [gdb_get_line_number "num-devices-check"]
    set devices_driver_check [gdb_get_line_number "devices-driver-check"]
    gdb_breakpoint $num_devices_check {temporary}
    gdb_breakpoint $devices_driver_check {temporary}
    gdb_continue_to_breakpoint "num devices check" \
	".*$srcfile:$num_devices_check.*"

    set num_devices [get_integer_valueof "num_devices" 0]
    set data_len [get_integer_valueof "DIM0" 0]

    # No need to run the tests twice with the same DEVICES_COUNT.
    if {$num_devices == $devices_count} {
	return 0
    }
    set devices_count $num_devices

    if {$num_devices < 2} {
	unsupported "test is aimed at multi-device machines"
	return 0
    }

    gdb_continue_to_breakpoint "devices driver check" \
	".*$srcfile:$devices_driver_check.*"
    set devices_same_driver [get_integer_valueof "devices_same_driver" 0]
    if {$devices_same_driver == 0} {
	unsupported "test needs to be run using devices via one driver only"
	return 0
    }

    set bp1 [gdb_get_line_number "kernel-first-line"]
    gdb_breakpoint $bp1
    set bp2 [gdb_get_line_number "kernel-last-line"]
    gdb_breakpoint $bp2
    set check_bp [gdb_get_line_number "check-marker"]
    gdb_breakpoint $check_bp

    variable bp1_hit
    variable bp2_hit
    array set bp1_hit {}
    array set bp2_hit {}
    for {set i 0} {$i < $num_devices} {incr i} {
	set bp1_hit($i) 0
	set bp2_hit($i) 0
    }

    # We should hit bp1 first.  The order thereafter is not fixed.
    gdb_continue_to_breakpoint "kernel bp1 first hit" "$srcfile:$bp1.*"
    set device [get_device]
    incr bp1_hit($device)
    # Reset the spin-flag for all lanes to bring the threads to a
    # fair state to compete with each other.  This makes the test
    # scenario more interesting.
    #
    # This can take a long time, because there are potentially
    # several thousands of lanes.  Use a timeout factor.
    with_timeout_factor 2 {
	gdb_test "thread apply all-lanes -s print spin=false" ".*"
    }

    set trip 1
    while {$trip > 0} {
	with_test_prefix "trip $trip" {
	    incr trip
	    gdb_test_multiple "continue" "resume" {
		-re -wrap "The program is not being run.*" {
		    fail "$gdb_test_name (Process no longer exist)"
		    return
		}
		-re -wrap "$srcfile:$bp1.*" {
		    set device [get_device]
		    incr bp1_hit($device)
		}
		-re -wrap "$srcfile:$bp2.*" {
		    set device [get_device]
		    incr bp2_hit($device)
		}
		-re -wrap "$srcfile:$check_bp.*" {
		    set trip 0
		    pass $gdb_test_name
		}
		default {
		    set trip 0
		    fail $gdb_test_name
		}
	    }
	}
    }

    # For logging purposes.
    gdb_test "info break"

    for {set i 0} {$i < $num_devices} {incr i} {
	gdb_assert {$bp1_hit($i) == $bp2_hit($i)} "device $i hit both"
	gdb_assert {$bp1_hit($i) > 1} "hit at least once for device $i"
	if { $i > 0 } {
	    gdb_assert {$bp1_hit($i) == $bp1_hit([expr $i - 1])} \
		"compare dev$i hit count with previous dev"
	}
    }

    continue_sycl_program_to_termination
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    sycl_with_intelgt_lock $device {

	foreach_with_prefix ze_hierarchy {"COMPOSITE" "COMBINED" "FLAT"} {
	    clean_restart $binfile
	    gdb_test "set env ZE_FLAT_DEVICE_HIERARCHY=$ze_hierarchy"
	    if {![runto_main [sycl_get_device_args $device]]} {
		continue
	    }
	    test_multi_device
	}
    }
}
