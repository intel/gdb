# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDBs support for workitem IDs.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

proc get_id {name pretty {kfail ""}} {
    global decimal
    set expected_id "unexpected"
    if {$pretty} {
	set fmt "<x>: %d, <y>: %d, <z>: %d"
	set expected "\r\n(<x>: $decimal, <y>: $decimal, <z>: $decimal)"
    } else {
	set fmt "%d, %d, %d"
	set expected "\r\n($decimal, $decimal, $decimal)"
    }

    if { $kfail ne "" } { setup_kfail $kfail "*-*-*" }
    gdb_test_multiple "printf \"$fmt\\n\",${name}2,${name}1,${name}0" "get expected id $name $pretty" {
	-re -wrap $expected {
	    set expected_id $expect_out(1,string)
	}
    }

    return $expected_id
}

proc compare_id {name pretty {kfail ""}} {
    with_test_prefix "check ${name} ${pretty}" {
	global decimal
	set expected_val [get_id $name $pretty $kfail]
	if { $kfail ne "" } { setup_kfail $kfail "*-*-*" }
	gdb_test "print \$_$name" "\\$$decimal = \\{$expected_val\\}" "check $name == {$expected_val}"
    }
}

proc check_ids {wg_dim_size {kfail ""}} {
    global decimal
    set threads_to_test {}
    set workgroups_to_test {}
    set name "thread_workgroup"
    gdb_test_multiple "thread apply * -q -s printf \"%d.%d %d, %d, %d\\n\",\$_inferior,\$_thread,${name}2,${name}1,${name}0" "find threads to test" {
	-re "\r\n($decimal\.$decimal) ($decimal, $decimal, $decimal)" {
	    set workgroup $expect_out(2,string)
	    # Check if we found a new not-yet met workgroup.
	    # If we do not yet have two workgroups to test, add it to the list.
	    if {([lsearch $workgroups_to_test $workgroup] == -1)
		 && ([llength $workgroups_to_test] < 2)} {
		lappend workgroups_to_test $workgroup
	    }
	    # If workgroup belongs to our list, add the thread to the list of threads to test.
	    if {[lsearch $workgroups_to_test $workgroup] != -1} {
		lappend threads_to_test $expect_out(1,string)
	    }
	    exp_continue
	}
	-re -wrap "" {
	    pass $gdb_test_name
	}
    }

    set simd_width [get_integer_valueof "\$_simd_width" -1]
    if { $kfail ne "" } { setup_kfail $kfail "*-*-*" }
    gdb_assert {$simd_width > 0} "read SIMD width"

    # List of lanes for which we check the IDs.
    set lanes [list \
	0 \
	1 \
	[expr $simd_width / 2 - 2] \
	[expr $simd_width / 2 - 1] \
	[expr $simd_width / 2] \
	[expr $simd_width - 1]]

    set num_threads_checked 0
    gdb_test "disable pretty-printer global"

    foreach tid $threads_to_test {
	foreach lane $lanes {
	    with_test_prefix "Thread $tid:$lane" {
		gdb_test_multiple "thread $tid:$lane" "switch to $tid:$lane" {
		    -re -wrap "Switching to thread $tid:$lane.*" {}
		    -re -wrap "inactive.*" {
			break
		    }
		}
		compare_id "thread_workgroup" 0 $kfail
		compare_id "workitem_local_id" 0 $kfail
		compare_id "workitem_global_id" 0 $kfail
	    }
	}
	incr num_threads_checked
    }

    # Ensure that we have checked the expected number of threads.
    # Workgroup size is WG_DIM_SIZE * WG_DIM_SIZE * WG_DIM_SIZE.
    if {$simd_width eq 0} {
	kfail "JIRA GSD/10235" "simd_width==0"
	# Set to negative value to fail comparison in later steps.
	set num_threads_in_workgroup "-1"
    } else {
	set num_threads_in_workgroup \
	    [expr ($wg_dim_size * $wg_dim_size * $wg_dim_size + $simd_width - 1) / $simd_width]
    }
    set expected_num [expr 2 * $num_threads_in_workgroup]
    if { $kfail ne "" } { setup_kfail $kfail "*-*-*" }
    gdb_assert {$num_threads_checked == $expected_num} \
	"# threads checked = $num_threads_checked, # expected = $expected_num"

    # Now test the pretty-printer format.
    gdb_test "enable pretty-printer global"
    compare_id "thread_workgroup" 1 $kfail
    compare_id "workitem_local_id" 1 $kfail
    compare_id "workitem_global_id" 1 $kfail
}

foreach device $sycl_device_list {
    sycl_with_intelgt_lock $device {
	clean_restart "${binfile}"

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set kfail ""
	if {![is_pvc $device]} {
	    set kfail "JIRA GSD/10235"
	}
	set last_line_1 [gdb_get_line_number "kernel-1-last-line"]
	set last_line_2 [gdb_get_line_number "kernel-2-last-line"]
	gdb_breakpoint $last_line_1 {temporary}
	gdb_breakpoint $last_line_2 {temporary}
	gdb_continue_to_breakpoint "kernel 1" ".*$srcfile:$last_line_1.*"
	with_test_prefix "kernel 1, simd16" {
	    check_ids 4
	}
	if {![is_pvc $device]} {
	    setup_kfail "JIRA GSD/10235" "*-*-*"
	}
	gdb_continue_to_breakpoint "kernel 2" ".*$srcfile:$last_line_2.*"
	with_test_prefix "kernel 2, simd32" {
	    check_ids 5 $kfail
	}
    }
}
