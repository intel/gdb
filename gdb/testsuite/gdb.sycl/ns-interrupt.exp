# Copyright 2020-2024 Free Software Foundation, Inc.
# Copyright (C) 2020-2024 Intel Corporation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test non-stop functionality for SYCL.  Define a breakpoint that is
# hit by two threads.  Resume and then interrupt one of those threads.

load_lib sycl.exp

standard_testfile parallel-for-branch.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	set fill "\[^\r\n\]*"

	gdb_test_no_output "set non-stop on"
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Set the breakpoint.
	set bp [gdb_get_line_number "kernel-last-line"]
	gdb_breakpoint "$bp if dim0 == 9 || dim0 == 117"

	# Two threads are expected to hit.
	set fill "\[^\r\n\]*"
	set stopped_threads ""
	set tid_re "$decimal\(\.$decimal\)?"
	gdb_test_multiple "continue -a" "continue to the breakpoint" {
	    -re "Thread ($tid_re)$fill hit Breakpoint $fill$srcfile:$bp\r\n" {
		set thread_id $expect_out(1,string)
		lappend stopped_threads $thread_id
		if {[llength $stopped_threads] == 2} {
		    pass $gdb_test_name
		} else {
		    exp_continue
		}
	    }
	    -re "$gdb_prompt " {
		exp_continue
	    }
	}

	verbose -log "Stopped threads: $stopped_threads"
	if {[llength $stopped_threads] != 2} {
	    continue
	}

	# Switch to a stopped thread, resume it.
	set thread1 [lindex $stopped_threads 0]
	gdb_test "thread $thread1" \
	    ".Switching to thread ${thread1}.*" \
	    "switch to a stopped thread"

	gdb_test "continue &" "Continuing\." "resume the thread"

	# Wait to make sure the resumed thread has sufficient time
	# to terminate.
	sleep 2

	gdb_test "info threads $stopped_threads" ".*" \
	    "first info threads for logging"

	setup_kfail "JIRA IGDB/4783" "*-*-*"
	gdb_test_multiple "interrupt" "interrupt the thread" {
	    -re "$gdb_prompt " {
		gdb_test_multiple "" $gdb_test_name {
		    -re "Thread $thread1 ${fill}stopped.*" {
			pass $gdb_test_name
		    }
		}
	    }
	}

	# Once more, for the log.
	gdb_test "info threads $stopped_threads" ".*" \
	    "second info threads for logging"
    }
}
