# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test resuming a switched-to thread inside a SYCL kernel.

load_lib sycl.exp

# Use the "barrier" test to ensure a number of threads will have been
# dispatched by the time we hit the breakpoint.
standard_testfile barrier.cpp

# The actual test procedure.
proc test_resume {delete_bp} {
    global srcfile decimal gdb_prompt

    if {[start_sycl_program] < 0} {
	return -1
    }

    set bp1 [gdb_get_line_number "the-value"]
    set bp2 [gdb_get_line_number "last-line"]
    gdb_breakpoint $bp1
    set bp1_num [get_integer_valueof "\$bpnum" 0]
    gdb_breakpoint $bp2

    gdb_continue_to_breakpoint "hit the first bp" \
	".*$srcfile:$bp1.*"

    gdb_test_no_output "set scheduler-locking on"

    # Now switch to another thread and resume it.  This should first
    # report the pending hit for the first breakpoint, if not deleted.
    set current_thread [get_current_thread "line $bp1"]
    set another_thread \
	[get_another_stopped_thread $srcfile $bp1 $current_thread]

    gdb_test "thread ${another_thread}" \
	"Switching to thread ${another_thread}.*"

    if {$delete_bp} {
	gdb_test_no_output "delete $bp1_num"
    } else {
	gdb_continue_to_breakpoint "another thread hits the first bp" \
	    ".*$srcfile:$bp1.*"
    }
    gdb_test "continue" \
	"Thread ${another_thread} \[^\r\n\]+$srcfile:$bp2.*" \
	"another thread hits bp2"
}

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global binfile

    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    if {![is_level_zero_debug_api]} {
	unsupported "test is aimed at the L0-based stack only"
	return 0
    }

    foreach_with_prefix delete_bp {0 1} {
	clean_restart $binfile
	test_resume $delete_bp
    }
}

test_initialize
