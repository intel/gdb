# Copyright 2020-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDBs support for accessing variables in SYCL from different SIMD lanes.

load_lib sycl.exp

standard_testfile .cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

proc test_bp_1 {device} {
    global decimal hex

    gdb_test "print wi" " = .*"
    gdb_test "print lid" " = .*"

    set kfail ""
    if {[is_pvc $device]} {
	set kfail "JIRA IGDB/5126"
    }

    # Call operator() explicitly to work around known limitations.
    set v1 [get_valueof "" "pgid.operator() (wi)" "NONE" "" "$kfail"]
    set v2 [get_valueof "" "gid" "NONE"]
    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    gdb_assert {$v1 eq $v2} "pgid.operator() (wi) == gid"

    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    gdb_test_expr_eq "ain\[gid\]" "in"
    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    gdb_test_expr_eq "acs\[lid\].c" "cs"

    # LCS should be a reference here, as the lambda capture is by reference.
    gdb_test "print lcs" " = \\(uint16_t &\\) @$hex: 4"
}

proc test_bp_2 {device {lane 0} } {
    global decimal hex

    gdb_test "print wi" " = .*"
    gdb_test "print lid" " = .*"

    set kfail ""
    if {[is_pvc $device]} {
	set kfail "JIRA IGDB/5126"
    }
    # Call operator() explicitly to work around known limitations.
    set v1 [get_valueof "" "pgid.operator() (wi)" "NONE" "" "$kfail"]
    set v2 [get_valueof "" "gid" "NONE"]
    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    gdb_assert {$v1 eq $v2} "pgid.operator() (wi) == gid"

    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    if {[require_sycl_device $device "gpu" "Intel*"]} {
	setup_kfail "JIRA IGDB/4643" "*-*-*"
    }
    set v1 [get_valueof "" "atmp\[gid\].a" "NONE"]
    set v2 [get_valueof "" "in" "NONE"]
    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    if {[require_sycl_device $device "gpu" "Intel*"]} {
	setup_kfail "JIRA IGDB/4643" "*-*-*"
    }
    gdb_assert {$v1 eq $v2} "atmp\[gid\].a == in"

    setup_kfail "JIRA CMPLRLLVM/61198" "*-*-*"
    gdb_test_expr_eq "aout\[gid\]" "out"

    # LCS should be a reference here, as the lambda capture is by reference.
    gdb_test "print lcs" " = \\(uint16_t &\\) @$hex: 4"
    gdb_test "print cs" " = 4"
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set l1 [gdb_get_line_number "bp\.1"]
	set l2 [gdb_get_line_number "bp\.2"]

	gdb_breakpoint $l1
	send_continue_with_kfail "$srcfile" "$l1"
	gdb_continue_to_breakpoint "bp.1" ".*$srcfile:$l1.*"

	with_test_prefix "bp.1" {
	    if { [current_thread_has_simd_lanes] } {
		for {set i 0} {$i < 8} {set i [expr $i+4]} {
		    with_test_prefix "lane $i" {
			gdb_test "thread :$i" "Switching to thread .*:$i.*"

			test_bp_1 "$device"
		    }
		}
	    } else {
		test_bp_1 "$device"
	    }
	}

	# Make sure we're not stuck on bp.1.
	delete_breakpoints
	gdb_breakpoint $l2
	gdb_continue_to_breakpoint "bp.2" ".*$srcfile:$l2.*"

	with_test_prefix "bp.2" {
	    if { [current_thread_has_simd_lanes] } {
		for {set i 0} {$i < 8} {set i [expr $i+4]} {
		    with_test_prefix "lane $i" {
			gdb_test "thread :$i" "Switching to thread .*:$i.*"

			test_bp_2 "$device" $i
		    }
		}
	    } else {
		test_bp_2 "$device"
	    }
	}
    }
}
