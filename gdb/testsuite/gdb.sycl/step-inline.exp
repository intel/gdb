# Copyright 2020-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDBs support for stepping over inlined functions.

load_lib sycl.exp

standard_testfile step-inline.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    sycl_with_intelgt_lock $device {
	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# CPU threads hit just one branch, while GPU threads hit both branches.
	set number_branches_to_hit 2
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    set number_branches_to_hit 1
	}

	set breakpoint_line [gdb_get_line_number "breakpoint-here"]
	set before_branch_line [gdb_get_line_number "before-branch"]
	set condition_line [gdb_get_line_number "condition"]
	set then_branch_line [gdb_get_line_number "then-branch"]
	set else_branch_line [gdb_get_line_number "else-branch"]
	gdb_breakpoint $breakpoint_line {temporary}

	gdb_continue_to_breakpoint "before inlined calls" \
	    ".*$srcfile:$breakpoint_line.*"

	# Set scheduler locking to step so we can step w/o switching threads.
	gdb_test "set scheduler-locking step"

	# Step through the program.

	gdb_test "next" "before-branch.*" "step to \"before-branch\""
	gdb_test "next" "condition.*" "step to \"condition\""

	set i 0
	while { $i < $number_branches_to_hit } {
	    with_test_prefix "through branch iteration $i" {
		incr i
		gdb_test_multiple "next" "step into branch" {
		    -re "then-branch.*$gdb_prompt" {
			pass "$gdb_test_name then"
		    }
		    -re "else-branch.*$gdb_prompt" {
			pass "$gdb_test_name else"
		    }
		    -re "$gdb_prompt" {
			fail "$gdb_test_name"
		    }
		}
	    }
	}
    }
}
