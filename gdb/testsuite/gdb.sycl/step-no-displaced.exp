# Copyright 2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests GDBs support for SYCL; in particular, verifying that single-stepping
# works in absence of displaced stepping

load_lib sycl.exp

standard_testfile single-task.cpp

if {[skip_sycl_tests]} {
    unsupported "target does not support SYCL"
    return 0
}

if {[prepare_sycl_for_testing $binfile $srcfile]} {
    return -1
}

if {[start_sycl_program] < 0} {
    return -1
}

# Will expect different output for Intel GPU and other devices.
set is_intelgpu [require_sycl_device "gpu" "Intel*"]

# Make sure breakpoint are never removed on a regular stop.
gdb_test "set breakpoint always-inserted 1"
# Disable displaced stepping to force a breakpoint dance if
# independent step-over is not possible.
gdb_test "set displaced-stepping 0"

# Break at the first line of the kernel.
set first_line [gdb_get_line_number "kernel-line-1"]
gdb_breakpoint $first_line
gdb_continue_to_breakpoint "first line" ".*$srcfile:$first_line.*"

# Enable debug output to verify expected execution flow.
gdb_test "set debug infrun 1"
gdb_test "set debug breakpoints 1"
gdb_test "set debug displaced 1"

# Check that neither displaced stepping nor bp manipulation is happening.
gdb_test_multiple "continue" "step-over works with bp still inserted" {
    -re "displaced: stepping process" {
	fail $gdb_test_name
    }
    -re "insert_bp_location.*single-task.cpp:$first_line" {
        if $is_intelgpu {
	    fail $gdb_test_name
	} else {
	    exp_continue
	}
    }
    -re "remove_breakpoint_1.*single-task.cpp:$first_line" {
        if $is_intelgpu {
	    fail $gdb_test_name
	} else {
	    exp_continue
	}
    }
    -re "stepped breakpoint.*exited normally.*$gdb_prompt $" {
	pass $gdb_test_name
    }
    -re "$gdb_prompt $" {
	fail $gdb_test_name
    }
}
