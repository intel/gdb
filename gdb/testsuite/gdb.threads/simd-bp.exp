# Copyright 2019-2021 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for SIMD support in breakpoints, single SIMD lane hit.

# This is a generic test, however, SIMD lanes are not supported by all
# targets.  For convenience, to test this functionality, a SYCL
# program with the offload to Intel GPU is used here.

load_lib sycl.exp

standard_testfile simd.cpp

if { [skip_sycl_tests] } {
    unsupported "target does not support SYCL"
    return 0
}

if { ![require_sycl_device "gpu" "Intel*"] } {
    unsupported "test is aimed at Intel GPUs only"
    return 0
}

if { [prepare_sycl_for_testing $binfile $srcfile] } {
    return -1
}

if { [start_sycl_program] < 0 } {
    return -1
}

set line_dim0_defined [gdb_get_line_number "kernel-dim0-defined"]
set third_line [gdb_get_line_number "kernel-third-line"]
set fourth_line [gdb_get_line_number "kernel-fourth-line"]
set fifth_line [gdb_get_line_number "kernel-fifth-line"]
set sixth_line [gdb_get_line_number "kernel-sixth-line"]
set condition_line [gdb_get_line_number "kernel-condition-line"]
set even_branch [gdb_get_line_number "kernel-even-branch"]
set odd_branch [gdb_get_line_number "kernel-odd-branch"]

gdb_breakpoint "$line_dim0_defined" {temporary}

gdb_continue_to_breakpoint "hit the BP after dim0 defined"

set first_thread [get_current_thread "$line_dim0_defined"]
if { $first_thread eq "2.2" } {
    set second_thread "2.3"
    set third_thread "2.4"
} else {
    set second_thread "2.2"
    if { $first_thread eq "2.5" } {
	set third_thread "2.6"
    } else {
	set third_thread "2.5"
    }
}

set dim0_first_thread_5 [get_var_for_lane "dim0" 5]
set dim0_first_thread_7 [get_var_for_lane "dim0" 7]

set test_lane_clause "should stop on a BP with a lane clause"
set n_hit_lane_clause 0
gdb_breakpoint "$third_line thread $second_thread:3"

set test_lane_clause_condition "should stop on a BP with a lane clause and condition"
set n_hit_lane_clause_condition 0
gdb_breakpoint "$fourth_line thread $first_thread:5 if dim0 == $dim0_first_thread_5"

set test_condition "should stop on a BP with a condition"
set n_hit_condition 0
gdb_breakpoint "$sixth_line if dim0 == $dim0_first_thread_7"

# Should not stop here, because only odd SIMD lanes are active.
set test_odd "no stop if condition is true for inactive SIMD lane"
set hit_cond_for_inactive_lane false
gdb_breakpoint "$odd_branch if dim0 == 6"

# Should not stop here, since only even SIMD lanes are active.
set test_even "no stop if thread clause includes inactive SIMD lane"
set hit_lane_clause_for_inactive_lane false
gdb_breakpoint "$even_branch thread 5:3"

# Should not stop here, the condition and thread do not match.
set test_condition_lane_mismatch "no stop if condition does not match SIMD lane"
set hit_condition_lane_mismatch false
gdb_breakpoint "$condition_line thread $first_thread:7 if dim0 == $dim0_first_thread_5"

# No stop for false condition.
set test_false_condition "no stop for false condition"
set hit_false_condition false
gdb_breakpoint "$fifth_line if false"

set test_terminated "program terminated normally"

# Switch to the third thread, which is equal to neither the first nor the second.
gdb_test "thread $third_thread" ".*$third_thread.*"\
    "Switch to third thread ($third_thread)"

set should_continue true
set i 0

while {$should_continue && $i < 10} {
    incr i
    with_test_prefix "iteration $i" { gdb_test_multiple "continue" "continue" {
	-re "$srcfile:$third_line.*$gdb_prompt" {
	    # Thread should be $second_thread, SIMD lane 3.
	    gdb_test "thread" ".*$second_thread:3.*"\
		"second thread ($second_thread) after BP with lane clause"
	    incr n_hit_lane_clause
	    gdb_test "print \$_simd_lane" "= 3"
	}
	-re "$srcfile:$fourth_line.*$gdb_prompt" {
	    # The thread should be first_thread, SIMD lane have to be 5.
	    gdb_test "thread" ".*$first_thread:5.*"\
		"first thread ($first_thread) after hit BP with lane clause and condition "
	    incr n_hit_lane_clause_condition
	    gdb_test "print \$_simd_lane" "= 5"
	}
	-re "$srcfile:$sixth_line.*$gdb_prompt" {
	    # Thread should be $first_thread, SIMD lane 7.
	    gdb_test "thread" ".*$first_thread:7.*"\
		"first thread ($first_thread) after BP with condition"

	    incr n_hit_condition
	}
	-re "$srcfile:$odd_branch.*$gdb_prompt" {
	    set hit_cond_for_inactive_lane true
	    gdb_test "p/t \$emask" "= \[01\]+" "odd branch emask"
	    kfail "JIRA DOQG/2417" $test_odd
	}
	-re "$srcfile:$even_branch.*$gdb_prompt" {
	    set hit_lane_clause_for_inactive_lane true
	    gdb_test "p/t \$emask" "= \[01\]+" "even branch emask"
	    fail $test_even
	}
	-re "$srcfile:$condition_line.*$gdb_prompt" {
	    set hit_condition_lane_mismatch true
	    gdb_test "print dim0" "= $dim0_first_thread_5" "check condition"
	    gdb_test "thread" "$first_thread:7" "check lane"
	    fail $test_condition_lane_mismatch
	}
	-re "$srcfile:$fifth_line.*$gdb_prompt" {
	    set hit_false_condition true
	    fail $test_false_condition
	}
	-re "$inferior_exited_re normally.\r\n" {
	    set should_continue false
	    pass $test_terminated
	}
	-re "$inferior_exited_re with code 01.\r\n" {
	    set should_continue false
	    pass $test_terminated
	}
    }}
}

if { $n_hit_lane_clause == 1} {
    pass $test_lane_clause
} else {
    fail $test_lane_clause
}

if { $n_hit_lane_clause_condition == 1 } {
    pass $test_lane_clause_condition
} else {
    fail $test_lane_clause_condition
}

if { $n_hit_condition == 1 } {
    pass $test_condition
} else {
    fail $test_condition
}

if { !$hit_lane_clause_for_inactive_lane } {
    pass $test_even
}

if { !$hit_cond_for_inactive_lane } {
    pass $test_odd
}

if { !$hit_condition_lane_mismatch } {
    pass $test_condition_lane_mismatch
}

if { !$hit_false_condition } {
    pass $test_false_condition
}
