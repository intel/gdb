# Copyright 2020-2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for SIMD support in commands command, multi SIMD lane hit.

# This is a generic test, however, SIMD lanes are not supported by all
# targets.  For convenience, to test this functionality, a SYCL
# program with the offload to Intel GPU is used here.

load_lib sycl.exp

standard_testfile simd.cpp

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global srcfile decimal

    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    if {[start_sycl_program] < 0} {
	return -1
    }

    set line_dim0_defined [gdb_get_line_number "kernel-dim0-defined"]
    set third_line [gdb_get_line_number "kernel-third-line"]

    gdb_breakpoint "$line_dim0_defined if dim0 == 3" {temporary}
    with_test_prefix "breakpoint 1" { set bp1 [get_var_for_lane "\$bpnum"] }

    gdb_breakpoint "$line_dim0_defined if dim0 < 8 && dim0 % 2 == 0" {temporary}
    with_test_prefix "breakpoint 2" { set bp2 [get_var_for_lane "\$bpnum"] }

    set test "commands #1"
    gdb_test_multiple "commands $bp1 $bp2" $test {
	-re "End with" {
	    pass $test
	}
    }

    gdb_test "p dim0\nend" "" "commands #2"

    if {[is_gen12]} {
	setup_kfail "JIRA DOQG/2974" "*-*-*"
    }
    gdb_continue_to_breakpoint \
	"continue to BPs with commands for a single lane" \
	".*\\$$decimal = 3\[\r\n\]+\\$$decimal = 0"

    # The current SIMD lane has to be 3.
    if {[is_gen12]} {
	setup_kfail "JIRA DOQG/2974" "*-*-*"
    }
    gdb_test "thread" ".*:3.*" "Check lane after commands for one lane."

    set first_thread [get_current_thread "$line_dim0_defined"]

    gdb_breakpoint "$third_line thread $first_thread if dim0 % 2 == 1" {temporary}
    with_test_prefix "breakpoint 3" { set bp3 [get_var_for_lane "\$bpnum"] }

    gdb_breakpoint "$third_line if dim0 == 4" {temporary}
    with_test_prefix "breakpoint 4" { set bp4 [get_var_for_lane "\$bpnum"] }

    gdb_test "thread :3" "$first_thread:3.*" "Set lane to 3 for the first thread ($first_thread)."
    set test "commands #3"
    gdb_test_multiple "commands /a $bp3 $bp4" $test {
	-re "Commands will be applied to all hit SIMD lanes.*End with" {
	    pass $test
	}
    }

    gdb_test "p dim0\nend" "" "commands #4"
    if {[is_gen12]} {
	setup_kfail "JIRA DOQG/2974" "*-*-*"
    }
    gdb_continue_to_breakpoint \
	"continue to BPs with commands for multiple lanes" \
	".*\\$$decimal = 1\[\r\n\]+\\$$decimal = 3\[\r\n\]+\\$$decimal = 5\[\r\n\]+\\$$decimal = 7\[\r\n\]+.*\\$$decimal = 4"

    # The current SIMD lane has to be 3.
    gdb_test "thread" ".*:3.*" "Check lane after commands for multiple lanes."
}

test_initialize
