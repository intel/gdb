# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Test the "info threads" output for inactive threads.

load_lib sycl.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	if {![is_level_zero_debug_api]} {
	    unsupported "test is aimed at Level-Zero Debug API only"
	    continue
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set submit_bp [gdb_get_line_number "deviceQueue.submit"]
	gdb_breakpoint $submit_bp {temporary}
	gdb_continue_to_breakpoint "submission"

	# At this point, the device must have been initialized but the kernel
	# is not yet offloaded.  So, there must be a second inferior but all
	# of its threads are inactive.

	set fill "\[^\r\n\]*"

	foreach flag {"" "-stopped"} {
	    set found_main 0
	    set num_inactive 0
	    gdb_test_multiple "info threads $flag" "info threads $flag" -lbl {
		-re "Id${fill}Target Id${fill}Frame${fill}" {
		    exp_continue
		}
		-re "1\.${decimal}${fill}Thread ${fill}:${submit_bp}" {
		    incr found_main
		    exp_continue
		}
		-re "${decimal}\.${decimal}${fill}Thread ${fill}\\(inactive\\)" {
		    incr num_inactive
		    exp_continue
		}
		-re "$gdb_prompt $" {
		    gdb_assert {$found_main == 1} \
			"$gdb_test_name: found main thread"
		    if {$flag eq ""} {
			gdb_assert {$num_inactive > 0} \
			    "$gdb_test_name: num inactive"
		    } else {
			gdb_assert {$num_inactive == 0} \
			    "$gdb_test_name: num inactive"
		    }
		}
	    }
	}
    }
}
