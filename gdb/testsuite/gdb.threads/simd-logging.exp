# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for the logging of the "thread" commands.

# This is a generic test, however, SIMD lanes are not supported by all
# targets.  For convenience, here the SYCL program with offload to the
# Intel GPU is used.

load_lib sycl.exp

standard_testfile simd.cpp

proc thread_with_lane_re {thread lane} {
    return [multi_line \
	"Thread $thread:$lane \[^\r\n\]+ lane $lane\\\):" \
	"\\\[Current thread is $thread:$lane \[^\r\n\]+ lane $lane\\\)\\\]"
    ]
}

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

proc test_running_thread {running_thread {is_kfail no}} {
    global testfile srcfile decimal
    # These globals are set by this test file.
    global fill odd_branch_inf odd_branch_thread bp_odd_branch

    gdb_test "thread $odd_branch_inf.$running_thread" \
	"\\\[Switching to thread $odd_branch_inf.$running_thread $fill\\\(running\\\)" \
	"switch to thread $odd_branch_inf.$running_thread which is executing"

    gdb_test "thread" \
	"\\\[Current thread is $odd_branch_inf.$running_thread $fill" \
	"print thread info for an executing thread, no error shall occur"

    if {$is_kfail} {
	setup_kfail "JIRA IGDB/4783" "*-*-*"
    }
    set first_thread_lane 1
    gdb_test "thread :$first_thread_lane" \
	"Thread $odd_branch_inf.$running_thread is executing, cannot check SIMD lane status: Cannot specify SIMD lane" \
	"print error for switching lane on executing thread"

    # Test that we print lane information for non executing threads but not for
    # executing threads.
    gdb_test "info threads 1.1" \
	"  1\.1 ${fill}Thread ($fill) \\\(LWP ($decimal)\\\) \"$testfile\" ${fill}\\\(running\\\)"

    gdb_test "info threads $odd_branch_inf.$odd_branch_thread" \
	"  $odd_branch_inf\.$odd_branch_thread:\\\[1 3 5 7${fill}\\\] ${fill}$srcfile:$bp_odd_branch" \
	"info threads for odd-branch-thread"

    gdb_test "info threads $odd_branch_inf.$running_thread" \
	"\\* $odd_branch_inf\.$running_thread ${fill}\\\(running\\\)" \
	"info threads for running-thread"

    # Test that we try to apply commands for executing and non executing threads.
    # Make sure that we check the correct order by comparing the indices of
    # $running_thread with $odd_branch_thread and using the flag "-ascending" if
    # necessary.
    if {$running_thread > $odd_branch_thread} {
	set command "thread apply all-lanes thread"
	set lane_1 7
	set lane_2 5
	set lane_3 3
	set lane_4 1
    } else {
	set command "thread apply all-lanes -ascending thread"
	set lane_1 1
	set lane_2 3
	set lane_3 5
	set lane_4 7
    }

    gdb_test_sequence $command "thread apply all-lanes thread" [list \
	[thread_with_lane_re "$odd_branch_inf\.$odd_branch_thread" "$lane_1"] \
	[thread_with_lane_re "$odd_branch_inf\.$odd_branch_thread" "$lane_2"] \
	[thread_with_lane_re "$odd_branch_inf\.$odd_branch_thread" "$lane_3"] \
	[thread_with_lane_re "$odd_branch_inf\.$odd_branch_thread" "$lane_4"] \
    ]

    # Test warning if we try to apply a command to a specific lane on
    # an executing thread.
    if {$is_kfail} {
	setup_kfail "JIRA IGDB/4783" "*-*-*"
    }
    gdb_test "thread apply :3 -unavailable thread" \
	"warning: Thread $odd_branch_inf\.$running_thread is executing, cannot check SIMD lane status: Cannot apply command on SIMD lane" \
	"thread apply warning for an executing thread if run for a specific lane."

    # Test warning if we try to apply a command on lanes.
    if {$is_kfail} {
	setup_kfail "JIRA IGDB/4783" "*-*-*"
    }
    gdb_test "thread apply :* -unavailable thread" \
	"warning: Thread $odd_branch_inf\.$running_thread is executing, cannot check SIMD lane status: Cannot apply command on SIMD lane" \
	"thread apply warning for an executing thread if run for lanes."
}


foreach device $sycl_device_list {
    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	save_vars { GDBFLAGS } {
	    append GDBFLAGS " -ex \"set non-stop on\""
	    clean_restart ${binfile}
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set data_length [get_integer_valueof "DIM0" "128"]
	set simd_width 16
	set num_threads [expr $data_length / $simd_width]
	verbose -log "num threads: $num_threads"

	set bp_odd_branch [gdb_get_line_number "kernel-odd-branch"]
	gdb_breakpoint "$bp_odd_branch"

	set fill "\[^\r\n\]*"
	set odd_branch_inf "invalid"
	set odd_branch_thread "invalid"
	set odd_branch_other_thread "invalid"
	set num_hits 0
	gdb_test_multiple "continue -a" "continue to kernel-odd-branch" {
	    -re "Thread ($decimal).($decimal)$fill hit Breakpoint $bkptno_numopt_re, with SIMD lanes \\\[1 3 5 7.*\\\],${fill}$srcfile:$bp_odd_branch\r\n" {
		set odd_branch_inf $expect_out(1,string)
		if {$odd_branch_thread eq "invalid"} {
		    set odd_branch_thread $expect_out(2,string)
		} else {
		    set odd_branch_other_thread $expect_out(2,string)
		}
		incr num_hits
		if {$num_hits < $num_threads} {
		    exp_continue
		}
	    }
	    -re "$gdb_prompt " {
		exp_continue
	    }
	    timeout {
		setup_kfail "JIRA IGDB/4784" "*-*-*"
	    }
	}

	gdb_assert {$num_hits == $num_threads} "all threads stopped"
	gdb_assert {$odd_branch_inf ne "invalid"} "bp inf found"
	gdb_assert {$odd_branch_thread ne "invalid"} "bp thread found"
	gdb_assert {$odd_branch_other_thread ne "invalid"} \
	    "other bp thread found"

	verbose -log "num hits: $num_hits"
	verbose -log "odd branch inf: $odd_branch_inf"
	verbose -log "odd branch thread: $odd_branch_thread"
	verbose -log "odd branch other thread: $odd_branch_other_thread"

	if {$odd_branch_inf eq "invalid" || $odd_branch_thread eq "invalid" } {
	    continue
	}

	# In non-stop mode we don't switch to the inferior which hit the breakpoint.
	gdb_test "thread" "Current thread is 1.($decimal) \\\(Thread.*"\
	    "currently running thread displays no lanes"

	# Switch to thread which is executing at a breakpoint.
	gdb_test "thread $odd_branch_inf.$odd_branch_thread" \
	    "Switching to thread $odd_branch_inf.$odd_branch_thread:1 .*" \
	    "switch to thread at default lane which is executing at the breakpoint"

	gdb_test "thread" \
	    "\\\[Current thread is $odd_branch_inf.$odd_branch_thread:1 $fill lane 1\\\)\\\]" \
	    "print thread info for executing thread, lane information shall be printed"

	gdb_test "thread apply :3 thread" \
	    [thread_with_lane_re "$odd_branch_inf\.$odd_branch_thread" "3"] \
	    "thread apply for specific lane of non executing thread"

	gdb_test "thread :5" \
	    "\\\[Switching to thread $odd_branch_inf.$odd_branch_thread:5 $fill lane 5\\\)\\\].*" \
	    "switch lane for a not executing thread"

	gdb_test "print \$_simd_lane" \
	    "= 5" \
	    "print \$_simd_lane = 5"

	# Extract a thread that is running and has the inferior number
	# $odd_branch_inf (thread on gpu).
	#
	# Frame arguments are irrelevant.  Ignore them for faster results.
	set wpfa "with print frame-arguments none -- "
	set running_thread "invalid"
	# The IntelGT target uses the first thread to report events
	# during attach.  To pick a thread for which no events are
	# reported, search in range 2-100.  This is a hack.
	gdb_test_multiple "${wpfa}info threads $odd_branch_inf.2-100" \
	    "extract running thread" {
	    -re "  $odd_branch_inf\.($decimal)${fill}\\\(running\\\)" {
		if {$running_thread eq "invalid"} {
		    set running_thread $expect_out(1,string)
		}
		exp_continue
	    }
	    -re "  $decimal\.($decimal)${fill}\\\(running\\\)" {
		exp_continue
	    }
	    -re "$gdb_prompt $" {
		gdb_assert {$running_thread ne "invalid"} $gdb_test_name
	    }
	}

	verbose -log "running thread id: $running_thread"
	verbose -log "odd branch thread id: $odd_branch_thread"

	if {$running_thread eq "invalid"} {
	    continue
	}

	# On the IntelGT target, there may be two kinds of "running"
	# threads in non-stop mode:  (1) those that were never
	# dispatched by the hardware and from whom the debugger never
	# received a stop event; (2) those that stop but then are
	# resumed by the debugger.  We test the output for both kinds.
	#
	# After all the expected number of breakpoints are received,
	# the threads that remain as "running" belong to category (1).
	# Below we test such a thread.
	with_test_prefix "never stopped" {
	    test_running_thread $running_thread yes
	}

	# Next, test the output for a thread that becomes running
	# because we resume it.  This is category (2) explained above.
	with_test_prefix "resumed" {
	    gdb_test "thread $odd_branch_inf.$odd_branch_other_thread:1" \
		"Switching to thread $odd_branch_inf.$odd_branch_other_thread:1 .*" \
		"switch to the other stopped thread"
	    setup_kfail "JIRA IGDB/4784" "*-*-*"
	    gdb_test "continue &" ".*" "resume the thread"
	    gdb_test "info thread $odd_branch_inf.$odd_branch_other_thread" \
		" $odd_branch_inf\.$odd_branch_other_thread${fill}\\\(running\\\)" \
		"sanity check resumed thread"
	    gdb_test "thread $odd_branch_inf.$odd_branch_thread:1" \
		"Switching to thread $odd_branch_inf.$odd_branch_thread:1 .*" \
		"switch back to the stopped thread"
	    test_running_thread $odd_branch_other_thread
	}
    }
}
