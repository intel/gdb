# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests -thread-hit-lanes-mask MI command.
#

load_lib sycl.exp

standard_testfile simd.cpp

if {[skip_sycl_tests]} {
    unsupported "target does not support SYCL"
    return 0
}

if {![require_sycl_device "gpu" "Intel*"]} {
    unsupported "test is aimed at Intel GPUs only"
    return 0
}

if {[prepare_sycl_for_testing $binfile $srcfile]} {
    return -1
}

mi_clean_restart $binfile

if {[mi_start_sycl_program] < 0} {
    return -1
}

set kernel_dim0_line [gdb_get_line_number "kernel-dim0-defined"]
set odd_branch_line [gdb_get_line_number "kernel-odd-branch"]

mi_continue_to_line $kernel_dim0_line "Continue to 'kernel_dim0_line' and stop at breakpoint"

set stopped_threads [mi_stopped_thread_ids $srcfile $kernel_dim0_line]
set bp_thread_id [lindex $stopped_threads 2]
set no_bp_thread_id [lindex $stopped_threads 3]

# Breakpoint to odd branch line with odd lane.
mi_gdb_test "-break-insert -t -p $bp_thread_id -l 3 $odd_branch_line" \
    "\\^done,bkpt=\{number=\".*\",type=\"breakpoint\",disp=\"del\",enabled=\"y\",addr=\"<MULTIPLE>\",thread=\"$bp_thread_id\",thread=\"$bp_thread_id\",lane=\"3\".*" \
    "Insert breakpoint to thread $bp_thread_id, lane 3"

# Continue and expect to hit the breakpoint at odd line.
mi_send_resuming_command "exec-continue" "continuing to bp"
mi_expect_stop "breakpoint-hit" ".*" ".*" ".*" $odd_branch_line [list ",execution-mask=\"$hex\",simd-width=\"$decimal\"" "disp=\"del\",hit-lanes-mask=\"0x8\""] "expect bp hit at line $odd_branch_line"

# Test hit lanes mask for current thread.
mi_gdb_test "-thread-hit-lanes-mask" \
    "\\^done,hit-lanes-mask=\"0x8\".*" \
    "hit lanes mask for current thread"

# Test hit lanes mask with current thread argument.
mi_gdb_test "-thread-hit-lanes-mask --thread $bp_thread_id" \
    "\\^done,hit-lanes-mask=\"0x8\".*" \
    "hit lanes mask for thread $bp_thread_id"

# Error cases.
mi_gdb_test "-thread-hit-lanes-mask --thread $no_bp_thread_id" \
    "\\^error,msg=\"Thread $no_bp_thread_id has no hit lanes mask.\"" \
    "With wrong thread"

mi_gdb_test "-thread-hit-lanes-mask abcd" \
    "\\^error,msg=\"-thread-hit-lanes-mask: No arguments required.\"" \
    "With wrong argument"

# Continue to end.
mi_send_resuming_command "exec-continue" "continuing to inferior exit"
