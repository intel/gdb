# Copyright 2022-2024 Free Software Foundation, Inc.
# Copyright (C) 2022-2024 Intel Corporation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests --lane argument in MI commands.
#

load_lib sycl.exp
load_lib mi-support.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    mi_clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	mi_clean_restart $binfile

	if {![mi_runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Check list-features that simd-lanes is supported.
	mi_gdb_test "-list-features" \
	    "\\^done,features=\\\[.*\"simd-lanes\".*\\\]" \
	    "-list-features includes \"simd-lanes\""

	set condition_line [gdb_get_line_number "kernel-condition-line"]
	set odd_branch_line [gdb_get_line_number "kernel-odd-branch"]

	mi_continue_to_line $condition_line "Continue to 'kernel-condition-line' and stop at breakpoint"

	mi_gdb_test "-data-evaluate-expression \$_simd_lane" \
	    "\\^done,value=\"0\"" \
	    "Default thread, default simd lane"

	mi_gdb_test "-data-evaluate-expression --lane 1 \$_simd_lane" \
	    "\\^done,value=\"1\"" \
	    "Default thread, simd lane 1"

	mi_gdb_test "-data-evaluate-expression \$_simd_lane" \
	    "\\^done,value=\"0\"" \
	    "Default thread, simd lane 0 restored"

	# Here next thread should have odd lanes active (1, 3, 5, 7).
	mi_continue_to_line $odd_branch_line "Continue to 'kernel-odd-branch' and stop at breakpoint"

	set stopped_threads [mi_stopped_thread_ids $srcfile $odd_branch_line]
	set second_thread_id [lindex $stopped_threads 1]

	mi_gdb_test "-data-evaluate-expression --thread $second_thread_id \$_simd_lane" \
	    "\\^done,value=\"1\"" \
	    "Thread $second_thread_id, default simd lane"

	mi_gdb_test "-data-evaluate-expression --lane 3 \$_simd_lane" \
	    "\\^done,value=\"3\"" \
	    "Default thread ($second_thread_id), simd lane 3"

	mi_gdb_test "-data-evaluate-expression --thread $second_thread_id --lane 3 \$_simd_lane" \
	    "\\^done,value=\"3\"" \
	    "Thread $second_thread_id, simd lane 3"

	mi_gdb_test "-data-evaluate-expression --thread $second_thread_id \$_simd_lane" \
	    "\\^done,value=\"1\"" \
	    "Thread $second_thread_id, simd lane 1 restored"

	# Error cases.
	mi_gdb_test "-data-evaluate-expression --thread $second_thread_id --lane 0 \$_simd_lane" \
	    "\\^error,msg=\"SIMD lane 0 is inactive in thread $second_thread_id.\"" \
	    "Thread $second_thread_id, error, inactive lane 0"

	mi_gdb_test "-data-evaluate-expression --thread $second_thread_id --lane 9999 \$_simd_lane" \
	    "\\^error,msg=\"Incorrect SIMD lane number: 9999.\".*" \
	    "Thread $second_thread_id, error, incorrect simd lane 9999"


	# Send resuming command.
	mi_send_resuming_command "exec-continue" "continuing to inferior exit"
	# Expect normal exit.
	mi_expect_stop "exited-normally" "" "" "" "" "" "exit normally"
    }
}
