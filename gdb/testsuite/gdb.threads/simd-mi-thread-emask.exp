# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests -thread-execution-mask MI command.
#

load_lib sycl.exp
load_lib mi-support.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	mi_clean_restart $binfile

	if {![mi_runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set dim0_defined_line [gdb_get_line_number "kernel-dim0-defined"]
	set odd_branch_line [gdb_get_line_number "kernel-odd-branch"]

	mi_continue_to_line $dim0_defined_line \
	    "Continue to 'dim0_defined_line' and stop at breakpoint"

	# First get _simd_width convenience variable value to compare correctness of
	# the MI command output.
	mi_gdb_test "-data-evaluate-expression \$_simd_width" \
	    "\\^done,value=\".*\"" \
	    "Get \$_simd_width value"

	set output $expect_out(buffer)
	regexp {value=\"(.*)\"} $output -> simd_width

	# Calculate the expected execution mask.
	set mask 0xffffffff
	set emask_int [expr $mask & int(pow(2, $simd_width) - 1)]
	set emask_hex [format 0x%x $emask_int]

	# Test execution mask of the current thread.
	mi_gdb_test "-thread-execution-mask" \
	    "\\^done,execution-mask=\"$emask_hex\"" \
	    "Current thread execution mask"

	# Here next thread should have odd lanes active (1, 3, 5, 7).
	mi_continue_to_line $odd_branch_line \
	    "Continue to 'kernel-odd-branch' and stop at breakpoint"

	set stopped_threads [mi_stopped_thread_ids $srcfile $odd_branch_line]
	set second_thread_id [lindex $stopped_threads 1]

	# Calculate the expected execution mask.
	set mask 0xaaaaaaaa
	set emask_int [expr $mask & int(pow(2, $simd_width) - 1)]
	set emask_hex [format 0x%x $emask_int]

	# Test execution mask value of another thread.
	mi_gdb_test "-thread-execution-mask --thread $second_thread_id" \
	    "\\^done,execution-mask=\"$emask_hex\"" \
	    "Thread $second_thread_id execution mask"

	# Error cases.
	mi_gdb_test "-thread-execution-mask --thread 1" \
	    "\\^error,msg=\"Thread 1 has no execution mask.\"" \
	    "Thread without execution mask"

	mi_gdb_test "-thread-execution-mask abcd" \
	    "\\^error,msg=\"-thread-execution-mask: No arguments required.\"" \
	    "With extra argument"

	# Send resuming command.
	mi_send_resuming_command "exec-continue" "continuing to inferior exit"
	# Expect normal exit.
	mi_expect_stop "exited-normally" "" "" "" "" "" "exit normally"
    }
}
