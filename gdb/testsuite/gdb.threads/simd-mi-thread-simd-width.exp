# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests -thread-simd-width MI command.
#

load_lib sycl.exp

standard_testfile simd.cpp

# A generic function name is used to call it from the SYCL library.
proc "sycl_${gdb_test_file_name}_run_tests" {} {
    global binfile srcfile expect_out

    if {![require_sycl_device "gpu" "Intel*"]} {
	unsupported "test is aimed at Intel GPUs only"
	return 0
    }

    mi_clean_restart $binfile

    if {[mi_start_sycl_program] < 0} {
	return -1
    }

    set dim0_defined_line [gdb_get_line_number "kernel-dim0-defined"]
    set odd_branch_line [gdb_get_line_number "kernel-odd-branch"]

    mi_continue_to_line $dim0_defined_line "Continue to 'kernel-dim0-defined' and stop at breakpoint"

    # First get _simd_width convenience variable value to compare correctness of
    # the MI command output.
    mi_gdb_test "-data-evaluate-expression \$_simd_width" \
	"\\^done,value=\".*\"" \
	"Get \$_simd_width value"

    set output $expect_out(buffer)
    regexp {value=\"(.*)\"} $output -> simd_width

    # Test MI access to the SIMD width of the current thread.
    mi_gdb_test "-thread-simd-width" \
	"\\^done,simd-width=\"$simd_width\"" \
	"Current thread simd width"

    mi_continue_to_line $odd_branch_line "Continue to 'kernel-odd-branch' and stop at breakpoint"

    set stopped_threads [mi_stopped_thread_ids $srcfile $odd_branch_line]
    set last_thread_id [lindex $stopped_threads [expr {[llength $stopped_threads] - 1}]]

    # Test MI access to the SIMD width of another thread.
    mi_gdb_test "-thread-simd-width --thread $last_thread_id" \
	"\\^done,simd-width=\"$simd_width\"" \
	"Thread $last_thread_id simd width"

    # Error cases.
    mi_gdb_test "-thread-simd-width --thread 1" \
	"\\^error,msg=\"Thread 1 has no SIMD width.\"" \
	"Thread without simd width"

    mi_gdb_test "-thread-simd-width abcd" \
	"\\^error,msg=\"-thread-simd-width: No arguments required.\"" \
	"With extra argument"

    # Send resuming command.
    mi_send_resuming_command "exec-continue" "continuing to inferior exit"
    # Expect normal exit.
    mi_expect_stop "exited-normally" "" "" "" "" "" "exit normally"
}

test_initialize
