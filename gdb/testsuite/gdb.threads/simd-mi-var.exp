# Copyright 2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests SIMD extension for MI variable object interface:
# -var-create
# -var-update


load_lib sycl.exp
load_lib mi-support.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
	 "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

proc var_obj_regex {lane name value} {
    global decimal
    if {$lane ne ""} {
	set lane "lane=\"$lane\","
    }
    return [join [list \
		      "name=\"$name\"" \
		      "numchild=\"${decimal}\"" \
		      "value=\"-?${decimal}\"" \
		      "type=\"\\w*\"" \
		      "thread-id=\"${decimal}\"" \
		      "${lane}has_more=\"\[01\]\""] \
		","]
}

foreach device $sycl_device_list {
    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	mi_clean_restart $binfile

	mi_gdb_test "-var-create" \
	    "\\^error,msg=\"-var-create: Usage: NAME FRAME EXPRESSION \\\[LANES\\\]\.\"" \
	    "error usage"

	mi_gdb_test "-var-create - * 9999 0xff" \
	    "\\^error,msg=\"-var-create: cannot specify lanes mask without a thread\.\"" \
	    "error without thread"

	if {![mi_runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	mi_gdb_test "-var-create - * 9999 0xff" \
	    "\\^error,msg=\"-var-create: cannot specify lanes mask for a thread without SIMD lanes\.\"" \
	    "error for thread w/o lanes"

	set kernel_third_line [gdb_get_line_number "kernel-third-line"]
	mi_continue_to_line $kernel_third_line \
	    "Continue to 'kernel_third_line' and stop at breakpoint"

	# Get global ID of the current thread.
	set thread [mi_get_integer_valueof "\$_gthread" "-1"]

	mi_gdb_test "thread :3" ".*Switching to.*:3.*lane 3.*" \
	    "switch to non-zero lane"

	# Create var object and check its value.
	set val_lane_3 [mi_get_integer_valueof "in_elem" "-1"]
	mi_gdb_test "-var-create - * in_elem" \
	    "\\^done,[var_obj_regex 3 var1 ${val_lane_3}]" \
	    "create variable var1 with default lane 3"

	# Switch to a different lane and check the value again.
	mi_gdb_test "thread :0" ".*Switching to.*:0.*lane 0.*" \
	    "switch to lane 0"
	mi_gdb_test "-var-evaluate-expression var1" \
	    "\\^done,value=\"${val_lane_3}\"" "check var1 is unchanged"

	# Step to the next line, the value of the in_elem has changed.
	mi_next_extra ".*" "step to next line 1"

	mi_gdb_test "-var-evaluate-expression var1" \
	    "\\^done,value=\"${val_lane_3}\"" "check var1 is unchanged after step"

	# Get the new value of in_elem.
	set val_lane_3 [mi_get_integer_valueof "in_elem" "-1" $thread 3 \
			    "get updated value for lane 3"]
	mi_gdb_test "-var-update var1" "\\^done,changelist=\\\[\{name=\"var1\".*" "update var1"
	mi_gdb_test "-var-evaluate-expression var1" \
	    "\\^done,value=\"${val_lane_3}\"" "check updated var1 object"

	mi_gdb_test "-var-create - * 9999 0x0" \
	    "\\^error,msg=\"-var-create: lanes mask must be greater than zero\.\"" \
	    "error for zero lanes mask"

	mi_gdb_test "-var-create - * 9999 0xffffffff" \
	    "\\^error,msg=\"-var-create: lanes mask ffffffff exceeds thread's SIMD width 16\.\"" \
	    "error for too wide lanes mask"

	set lanes [list 4 5 6 7]
	set mask 0xf0

	# Build the list of the expected var objects.
	set vars {}
	foreach i $lanes {
	    set val_lane_$i [mi_get_integer_valueof "in_elem" "-1" $thread $i]
	    lappend vars "var={[var_obj_regex $i var2-$i [set val_lane_$i]]}"
	}
	set vars [join $vars ","]

	# Create var object for lanes specified by the mask.
	mi_gdb_test "-var-create - * in_elem $mask" \
	    "\\^done,vars=\\\[$vars\\\]" \
	    "create variables for several lanes"

	# Step to the next line, the value of the in_elem has changed.
	mi_next_extra ".*" "step to next line 2"

	foreach i $lanes {
	    mi_gdb_test "-var-evaluate-expression var2-$i" \
		"\\^done,value=\"[set val_lane_$i]\"" "check var2-$i is unchanged"
	}

	# Update variables.
	mi_gdb_test "-var-update *" "\\^done,.*" "update all variables"

	# Check values of updated variables.
	foreach i $lanes {
	    set val [mi_get_integer_valueof "in_elem" "-1" $thread $i \
			 "get updated value for lane $i"]
	    gdb_assert {$val != [set val_lane_$i]} "in_elem for lane $i has changed"
	    mi_gdb_test "-var-evaluate-expression var2-$i" \
		"\\^done,value=\"$val\"" "check updated var2-$i object"
	}
    }
}
