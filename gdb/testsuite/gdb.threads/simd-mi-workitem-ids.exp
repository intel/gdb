# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests workitem ID support in MI.
#

load_lib sycl.exp
load_lib mi-support.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    clean_restart "${binfile}"
    with_test_prefix [sycl_get_device_prefix $device] {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	mi_clean_restart $binfile

	if {![mi_runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	# Set temporary breakpoint to line $kernel_dim0_line and continue.
	set odd_branch_line [gdb_get_line_number "kernel-odd-branch"]
	mi_tbreak "$srcfile:$odd_branch_line" "define temp bp on odd branch"
	mi_send_resuming_command "exec-continue" "-exec-continue to odd branch"
	mi_expect_stop "breakpoint-hit" ".*" ".*" ".*" "$decimal" \
	    [list ".*" ".*" {locno="[0-9]+"}] \
	    "expect bp hit at odd branch"

	# Get global ID of the current thread.
	set current_thread [mi_get_integer_valueof "\$_gthread" 0]
	set thread_list [get_mi_thread_list "get all thread ids"]

	set unavailable_thread_found 0

	foreach thread $thread_list {
	    # The input program does not utilize all the GPU threads.
	    # Hence there must be some threads that are unavailable.
	    # We check that the MI output for an unavailable thread does
	    # not contain work-item related fields.
	    gdb_test_multiple "-thread-info $thread" "check thread $thread" {
		-re "threads=.*state=\"stopped\".*$mi_gdb_prompt$" {
		    # Do nothing, the thread is stopped.
		}
		-re "threads=.*state=\"unavailable\".*$mi_gdb_prompt$" {
		    verbose -log "Thread $thread is unavailable"

		    set out $expect_out(0,string)
		    foreach field {"thread-workgroup" "thread-workgroup-size" \
				       "local-ids"} {
			gdb_assert {[string first $field $out] == -1} \
			    "$field field is not included"
		    }
		    set unavailable_thread_found 1
		    # We found and tested an unavailable thread.  No need to continue.
		    break
		}
	    }
	}

	gdb_assert {$unavailable_thread_found} "found an unavailable thread"

	set id_pattern "\"$decimal,$decimal,$decimal\""
	mi_gdb_test "-thread-info $current_thread" \
	    "\\^done,threads=\\\[\{.*thread-workgroup=$id_pattern,.*\}\\\]" \
	    "Check workgroup field"
	mi_gdb_test "-thread-info $current_thread" \
	    "\\^done,threads=\\\[\{.*thread-workgroup-size=$id_pattern,.*\}\\\]" \
	    "Check workgroup-size field"

	# Despite being in odd branch we expect all local IDs to be present.
	set simd_width [mi_get_integer_valueof "\$_simd_width" -1]
	mi_gdb_test "-thread-info --lid $current_thread" \
	    "\\^done,threads=\\\[\{.*local-ids=\\\[\($id_pattern,?\)\{$simd_width\}\\\].*\}\\\]" \
	    "Check local-ids field"

	# No local-ids should show up if --lid is not passed.
	gdb_test_multiple "-thread-info $current_thread" "check no local ids" {
	    -re "local-ids.*$mi_gdb_prompt" {
		fail $gdb_test_name
	    }
	    -re "$mi_gdb_prompt" {
		pass $gdb_test_name
	    }
	}
    }
}
