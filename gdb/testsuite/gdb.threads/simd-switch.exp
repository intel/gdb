# Copyright 2020-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for SIMD lane switching.

# This is a generic test, however, SIMD lanes are not supported by all
# targets.  For convenience, to test this functionality, a SYCL
# program with the offload to Intel GPU is used here.

load_lib sycl.exp

standard_testfile simd-switch.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	clean_restart "${binfile}"

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set first_line [gdb_get_line_number "kernel-first-line"]
	set second_line [gdb_get_line_number "kernel-second-line"]
	set condition_line [gdb_get_line_number "kernel-condition-line-1"]
	set odd_branch [gdb_get_line_number "kernel-odd-branch"]

	gdb_breakpoint "$first_line" {temporary}
	gdb_continue_to_breakpoint "hit the BP at first line \[1\]" \
	    "$srcfile:$first_line.*"

	set first_thread [get_current_thread "get first thread"]
	gdb_test_no_output "set scheduler-locking on" \
	    "scheduler-locking on for the first thread $first_thread"

	gdb_breakpoint "$second_line thread $first_thread:3"

	# Test SIMD switch output message after BP hit with the same thread but
	# different lane.
	gdb_test "continue" "Switching to SIMD lane 3.*$srcfile:$second_line.*"\
	    "SIMD lane switch within a thread after BP"

	gdb_test "thread :5" "\[Switching to thread $first_thread:5.*\].*"\
	    "Switch first thread to :5"

	set has_switch_output false
	gdb_test_multiple "next" "next in same lane has no switch output" {
	    -re "\\\[Switching to SIMD lane .*\\\]" {
		fail $gdb_test_name
	    }
	    -re "$gdb_prompt" {
		pass $gdb_test_name
	    }
	}

	gdb_test "thread" "Current thread is $first_thread:5.*" \
	    "next preserves lane"
	gdb_test "print \$_simd_lane" "= 5" "\$_simd_lane preserved by next"

	# Test SIMD switch after stepping into the even branch.
	gdb_test "next" "\\\[Switching to SIMD lane 0\\\].*"\
	    "SIMD lane switch after stepping into even branch"

	# Test SIMD switch after stepping out of the odd branch.
	gdb_test "next 2" "\\\[Switching to SIMD lane 1\\\].*"\
	    "SIMD lane switch after stepping into odd branch after even"
	gdb_test "print \$_simd_lane" "= 1" "check \$_simd_lane after next"

	gdb_test_no_output "set scheduler-locking off" \
	    "scheduler locking off for the first thread $first_thread"

	gdb_breakpoint "$second_line"
	# Second thread hit the BP 3.
	gdb_continue_to_breakpoint "hit the BP at second line \[2\]" \
	    "$srcfile:$second_line.*"

	set second_thread [get_current_thread "get second thread"]

	# GDB internally saves the lane 5.  Later we check that this value
	# is updated after the thread switch.
	gdb_test "thread :5" "\\\[Switching to thread $second_thread:5.*\\\].*"\
	    "Switch second thread to :5"

	# Continue.  The third thread hits the BP.
	gdb_continue_to_breakpoint "hit the BP at second line \[3\]" \
	    "$srcfile:$second_line.*"

	set third_thread [get_current_thread "get third thread"]

	gdb_test_no_output "set scheduler-locking on" \
	    "scheduler-locking on for the third thread $third_thread"

	# Check that the internal previously selected lane (5 in the second thread)
	# was updated after the thread switch.  If it was not updated, we would see
	# a thread switch output, although no switch has happened.
	gdb_test "next" "\(?!Switching to SIMD lane\)" \
	    "GDB updates internally saved simd lane after thread switch"

	# Check that until does not switch lanes.
	gdb_test "thread :4" "\\\[Switching to thread $third_thread:4.*\\\].*" \
	    "switch third thread to non-zero lane"

	set has_switch_output false
	gdb_test_multiple "until" "until has no switch output" {
	    -re "\\\[Switching to SIMD lane 0\\\]" {
		fail $gdb_test_name
	    }
	    -re "$gdb_prompt" {
		pass $gdb_test_name
	    }
	}

	gdb_test "thread" "Current thread is $third_thread:4.*" \
	    "until preserves lane"

	# until switches to the default lane in odd branch.
	gdb_test "until $odd_branch" "\\\[Switching to SIMD lane 1\\\].*" \
	    "lane switches after until to odd branch"
    }
}
