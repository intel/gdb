# Copyright 2019-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Tests for SIMD support in "thread" command.

# This is a generic test, however, SIMD lanes are not supported by all
# targets.  For convenience, here the SYCL program with offload to the
# Intel GPU is used.

load_lib sycl.exp

standard_testfile simd.cpp

set sycl_device_list [init_sycl_devices_list]
if {[llength $sycl_device_list] == 0} {
    unsupported "target does not support SYCL"
    return 0
}

if {[build_executable "failed to compile $srcfile" \
    "${binfile}" $srcfile {sycl debug}]} {
    return -1
}

foreach device $sycl_device_list {
    sycl_with_intelgt_lock $device {

	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    unsupported "test is aimed at Intel GPUs only"
	    continue
	}

	clean_restart "${binfile}"

	with_test_prefix "no inferior" {
	    gdb_test "thread :0" "No thread selected\."
	    gdb_test "print \$_simd_lane" "= -1"
	}

	if {![runto_main [sycl_get_device_args $device]]} {
	    continue
	}

	set odd_branch [gdb_get_line_number "kernel-odd-branch"]
	gdb_breakpoint "$odd_branch" {temporary}

	gdb_test "continue" ".*\\\[1 3 5 7.*\\\].*$srcfile:$odd_branch.*" \
	    "hit the BP in odd branch"

	set first_thread [get_current_thread "odd branch"]
	set first_thread [lindex [split $first_thread "."] 1]

	gdb_test "thread" "Current thread is 2.$first_thread:1 (.*lane 1).*"\
	    "current thread displays lanes"
	gdb_test "print \$_simd_lane" "= 1"

	set first_thread_lane 3
	if {$first_thread != "3"} {
	    set second_thread 3
	} else {
	    set second_thread 4
	}

	# thread :3, change lane within a thread
	gdb_test "thread :$first_thread_lane"\
	    "Switching to.*$first_thread:$first_thread_lane.*\
	    (.*lane $first_thread_lane).*"\
	    "explicitly set lane"
	gdb_test "print \$_simd_lane" "= $first_thread_lane" "print \$_simd_lane = \$first_thread_lane"

	# thread 3, first active lane is chosen
	gdb_test "thread $second_thread"\
	    "Switching to.*$second_thread:1.*(.*lane 1).*"\
	    "first active lane is chosen"
	# thread 2, previously selected lane is chosen
	gdb_test "thread $first_thread"\
	    "Switching to.*$first_thread:$first_thread_lane.*(.*lane $first_thread_lane).*"\
	    "previously selected lane is chosen"
	# thread 3:5
	gdb_test "thread $second_thread:5"\
	    "Switching to.*$second_thread:5.*(.*lane 5).*"\
	    "current inferior, explicitly set thread and lane"
	# thread 2.2:1
	gdb_test "thread 2.$first_thread:1"\
	    "Switching to.*2.$first_thread:1.*(.*lane 1).*"\
	    "explicitly set inferior, thread, lane"

	gdb_test "thread $second_thread:2"\
	    "SIMD lane 2 is inactive in thread 2.$second_thread."\
	    "inactive SIMD lane not set"
	gdb_test "thread $second_thread:999"\
	    "Incorrect SIMD lane number: 999."\
	    "incorrect SIMD lane not set"
	gdb_test "thread 1.1:1" "Thread 1.1 does not have SIMD lanes: Cannot specify SIMD lane"\
	    "Cannot set SIMD lane in thread without lanes"
    }
}
