# Copyright 2019-2023 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Support library for testing SYCL GDB features
#
# A particular SYCL device can be selected by passing the SYCL program
# three command-line arguments:
#   1. the device type, whose value is in {cpu, gpu, accelerator}.
#   2. a substring of the device name.
#   3. backend name.
#
# To set these arguments properly, use a SYCL board file, and
# make your test program select a queue via the get_sycl_queue
# function in gdb.sycl/sycl-util.cpp.  See gdb.sycl/sycl-hello.cpp
# for a sample SYCL program setup.

load_lib intelgt-utils.exp

# Define global variables for the driver version and platform.

if {![info exists OFFLOAD_DEVICE_GROUP]} {
    set OFFLOAD_DEVICE_GROUP "cpu,gpu,accelerator"
}
if {![info exists OFFLOAD_IGNORE_PREPARE_FOR_TESTING]} {
    set OFFLOAD_IGNORE_PREPARE_FOR_TESTING "0"
}
if {![info exists OFFLOAD_PERF_AOT_TESTING]} {
    set OFFLOAD_PERF_AOT_TESTING "0"
}

verbose -log "OFFLOAD_DEVICE_GROUP is '$OFFLOAD_DEVICE_GROUP'"
verbose -log "OFFLOAD_IGNORE_PREPARE_FOR_TESTING is '$OFFLOAD_IGNORE_PREPARE_FOR_TESTING'"
verbose -log "OFFLOAD_PERF_AOT_TESTING is '$OFFLOAD_PERF_AOT_TESTING'"

# Return true if the SYCL device selected via the board file
# matches the arguments.  Otherwise return false.
# Input arg DEVICE contains ";" separated following information:
# Device name;Backend Type;Backend Platform version.
# See an example in init_sycl_devices_list.

proc require_sycl_device {device type name} {
    set args_list [sycl_get_device_args $device]
    if {[llength $args_list] <= 2} {
	return 0
    }

    set type_match [expr {[lindex $args_list 0] eq $type}]
    set name_match [string match $name [lindex $args_list 1]]

    return [expr $type_match && $name_match]
}

# Remove duplicates from the input available devices list for CPU and FPGA.
# Duplicates may exists due to multiple runtimes installed on a machine.  So
# remove the duplicate entry as the test can not choose among them.

proc sycl_remove_duplicate_devices {sycl_device_list} {
    set updated_sycl_device_list {}
    set cpu_device_exist 0
    set fpga_device_exist 0

    foreach device $sycl_device_list {
	if [string match -nocase "*cpu*" $device] {
	    if {$cpu_device_exist == 1} {
		continue
	    }
	    set cpu_device_exist 1
	} elseif [string match -nocase "*accelerator*" $device] {
	    if {$fpga_device_exist == 1} {
		continue
	    }
	    set fpga_device_exist 1
	}
	lappend updated_sycl_device_list "${device}"
    }

    return ${updated_sycl_device_list}
}

# Run a test on the target to check if it recognizes SYCL.
# Remove device from the available devices list if SYCL is not supported
# and return the updated list.

proc get_sycl_supported_devices {sycl_device_list} {
    global srcdir objdir subdir gdb_prompt inferior_exited_re
    global OFFLOAD_IGNORE_PREPARE_FOR_TESTING

    set supported_sycl_device_list {}

    # Set up, compile, and execute a simple SYCL program.
    set src "$srcdir/lib/sycl-hello.cpp"

    # Don't re-compile in case OFFLOAD_IGNORE_PREPARE_FOR_TESTING option
    # is set.
    if {$OFFLOAD_IGNORE_PREPARE_FOR_TESTING == "1"} {
	set exe "$objdir/sycl-hello"
    } else {
	set exe [standard_output_file sycl-hello]
	if {[build_executable "failed to compile $src" \
			    $exe $src {sycl debug}]} {
	    verbose "SYCL: Compilation failed" 0
	    return 1
	}
	verbose -log "\nSYCL: Compilation succeeded"
    }

    set sycl_updated_device_list \
	[sycl_remove_duplicate_devices "${sycl_device_list}"]
    foreach device $sycl_updated_device_list {
	if ![is_sycl_device_filtered $device] {
	    continue
	}

	clean_restart "${exe}"

	if {![sycl_start $device]} {
	    continue
	}

	set inside_kernel [gdb_get_line_number "inside-kernel" $src]
	gdb_breakpoint "sycl-hello.cpp:$inside_kernel"

	set result 1
	sycl_with_intelgt_lock $device {
	    gdb_test_multiple "continue" "continue" {
		-re -wrap "$inferior_exited_re normally].*" {
		    set result 1
		}
		-re -wrap "$inferior_exited_re with code.*" {
		    set result 1
		}
		-re -wrap "(?:Breakpoint) .* (at|in).*sycl-hello.cpp:$inside_kernel.*" {
		    set result 0
		}
		-re "Quit anyway\\? \\(y or n\\) $" {
		    send_gdb "y\n"
		    set result 1
		}
		-re -wrap "received signal SIGABRT, Aborted.*" {
		    set result 1
		}
		timeout {
		    set result 1
		}
	    }
	}

	if {$result == 0} {
	    verbose "SYCL: Support detected for ${device}" 0
	    lappend supported_sycl_device_list "${device}"
	} else {
	    verbose "SYCL: Support not detected for ${device}" 0
	}

	gdb_exit
    }

    return $supported_sycl_device_list
}

# Run the program under debug by passing DEVICE as the command line
# argument.  If the device is not Intel GT, stop at main.  If the
# device is Intel GT, continue until the zeContextCreate API call and
# attempt to create another inferior connected to an Intel GT
# gdbserver target.
#
# Return 1 on success, 0 on failure.

proc sycl_start {device} {
    global GDBSERVER_ZE

    if {[require_sycl_device $device "gpu" "Intel*"]} {
	# To debug an Intel GT device, we create an additional
	# inferior.  For the multi-target setting to work, we
	# need to operate in target-non-stop mode.
	gdb_test_no_output "maint set target-non-stop on"
    }

    if {![runto_main [sycl_get_device_args $device]]} {
	return 0
    }

    if {[require_sycl_device $device "gpu" "Intel*"]} {
	# For the Intel GT target, define a "hook" BP at a
	# Level-Zero API function at which the Level-Zero backend
	# would have been already initialized, attaching to the
	# device would be expected to succeed.  Once we hit the
	# hook BP, we create the additional inferior.
	gdb_breakpoint "zeContextCreate" {*}"allow-pending temporary"
	set hook_bp_hit [gdb_continue_to_breakpoint "hook bp" \
			     "zeContextCreate\[^\r\n\]*"]
	if {$hook_bp_hit != 0} {
	    return 0
	}

	# By default use the "gdbserver-ze" executable.  This can be
	# overridden via the GDBSERVER_ZE parameter to RUNTESTFLAGS.
	set gdbserver_ze "gdbserver-ze"
	if {[info exists GDBSERVER_ZE]} {
	    set gdbserver_ze $GDBSERVER_ZE
	    verbose -log "SYCL: Using gdbserver-ze: ${gdbserver_ze}"
	}

	with_test_prefix "$device" {
	    set inf_pid [get_inferior_pid]
	    gdb_test "add-inferior -no-connection"
	    gdb_test "inferior 2"
	    gdb_test "target remote | $gdbserver_ze --once --attach - $inf_pid" \
		"Remote debugging.*" "connect the remote target"
	    gdb_test "inferior 1"
	    gdb_test "set schedule-multi on"
	    gdb_test "info inferior" ".*" "inferiors for logging"
	}
    }

    return 1
}

# Get list of devices and return 0 if device list is non-empty else
# return 1.  Each device entry of this list contains ";" separated
# following information:
# Device name;Backend Type;Backend Platform version.
# e.g.
# Intel(R) Iris(R) Plus Graphics 655 [0x3ea5];ext_oneapi_level_zero;1.3.24347

gdb_caching_proc init_sycl_devices_list {} {
    global srcdir objdir subdir gdb_prompt
    global inferior_exited_re
    global sycl_device_list
    global env OFFLOAD_IGNORE_PREPARE_FOR_TESTING

    set sycl_device_list {}
    set supported_sycl_device_list {}

    # Set up, compile, and execute a simple SYCL program.
    set src "$srcdir/lib/sycl-devices.cpp"

    # Don't re-compile in case OFFLOAD_IGNORE_PREPARE_FOR_TESTING option
    # is set.
    if {$OFFLOAD_IGNORE_PREPARE_FOR_TESTING == "1"} {
	set exe "$objdir/sycl-devices"
	clean_restart $exe
    } else {
	if {![test_compiler_info {icx-*} c++]} {
	    unsupported "SYCL tests supported only for the icpx compiler"
	    return $sycl_device_list
	}

	set exe [standard_output_file sycl-devices]
	if {[prepare_for_testing "failed to compile $src" \
		$exe $src {sycl debug}]} {
	    verbose "SYCL: Compilation failed" 0
	    return $sycl_device_list
	}
	verbose -log "\nSYCL: Compilation succeeded"
    }

    if {![runto_main]} {
	untested "failed to run sycl-devices to main"
	return $sycl_device_list
    }

    set result 1
    gdb_test_multiple "continue" "continue" {
	-re "SYCL: List of Target devices: \\\[(\[^\r\n\]+)\\\]" {
	    set sycl_device_list [split $expect_out(1,string) ","]
	    exp_continue
	}
	-re -wrap "$inferior_exited_re normally].*" {
	    set result 0
	}
	-re -wrap "$inferior_exited_re with code.*" {
	    set result 1
	}
    }

    set supported_sycl_device_list [get_sycl_supported_devices $sycl_device_list]
    if {($result == 0) && ([llength $supported_sycl_device_list])} {
	verbose "SYCL: Devices found: $supported_sycl_device_list" 0
    } else {
	set result 1
	verbose "SYCL: No device found" 0
    }

    gdb_exit

    return $supported_sycl_device_list
}

# Return non-zero, if we are runing at Level-Zero.
# device contains ";" separated following information:
# Device name;Backend Type;Backend Platform version.
# See an example in init_sycl_devices_list.

proc is_level_zero {device} {
    return [regexp {.*(Level-Zero)} $device]
}

# Return non-zero, if we are runing on OpenCL.
# device contains ";" separated following information:
# Device name;Backend Type;Backend Platform version.
# See an example in init_sycl_devices_list.

proc is_opencl {device} {
    return [regexp {.*(OpenCL)} $device]
}

# Return non-zero, if the Level-Zero Debug API is being used.

proc is_level_zero_debug_api {} {
    global env

    if {![info exists env(ZET_ENABLE_PROGRAM_DEBUGGING)]} {
	return 0
    }

    set env_var $env(ZET_ENABLE_PROGRAM_DEBUGGING)
    if {[string is integer $env_var]} {
	return [expr $env_var ne "0"]
    } else {
	return 0
    }
}

# Return non-zero, if the ZE binary is being used.

proc is_level_zero_zebinary {} {
    global env

    if {![info exists env(IGC_EnableZEBinary)]} {
	return 1
    }

    set env_var $env(IGC_EnableZEBinary)
    if {[string is integer $env_var]} {
	return [expr $env_var ne "0"]
    } else {
	return 1
    }
}

# Return non-zero if the device is DG2.

proc is_dg2 {device} {

    if {[string match "*Intel* Arc* A* Graphics*" $device]} {
	return 1;
    }

    return 0;
}

# Return non-zero if the device is ATSM.

proc is_atsm {device} {

    if {[string match "*Intel* Data Center GPU Flex* 1*" $device]} {
	return 1;
    }

    return 0;
}

# Return non-zero if the device is PVC.

proc is_pvc {device} {

    if {[string match "*Intel* Data Center GPU Max* 1100*" $device]
	|| [string match "*Intel* Data Center GPU Max* 1550*" $device]
	|| [string match "*Intel* Data Center GPU Max* 1350*" $device]} {
	return 1;
    }

    return 0;
}

# Issue a 'continue' command and expect to see program termination.

proc continue_sycl_program_to_termination {{msg_suffix ""} {known_fail ""}} {
    global gdb_prompt inferior_exited_re

    if { $known_fail ne "" } { setup_kfail $known_fail "*-*-*" }

    gdb_test "continue" "$inferior_exited_re normally].*" \
	"continue to end $msg_suffix"
}

# Return the ID of the current thread (<inferior number>.<thread
# number>).  This procedure can be more practical than using the
# $_thread and $_inferior convenience variables, because if the SYCL
# kernel is offloaded to a CPU target, the current thread would be a
# single integer, but if offloaded to a GPU, it may be an
# inferior-qualified number like N.M.
proc get_current_thread {location} {
    global gdb_prompt decimal

    gdb_test_multiple "thread" "get current thread at $location" {
	-re -wrap "Current thread is ($decimal|$decimal\.$decimal).*" {
	    pass $gdb_test_name
	    return $expect_out(1,string)
	}
	-re -wrap "" {
	    fail $gdb_test_name
	}
    }
    return 0
}

# Returns a non-negative integer value of variable VAR for SIMD lane
# LANE_NUM in the current thread.
# Returns -1 on error.
proc get_var_for_lane {var {lane_num 0}} {
    global decimal
    global gdb_prompt

    gdb_test "thread :$lane_num" ":$lane_num.*" \
	"switch the current thread to lane $lane_num"

    set msg "get $var value for the current thread, lane $lane_num"
    gdb_test_multiple "print $var" $msg {
	-re "= ($decimal).*$gdb_prompt" {
	    pass $gdb_test_name
	    return $expect_out(1,string)
	}
	-re "$gdb_prompt" {
	    fail $gdb_test_name
	    return -1
	}
    }
}

# Returns 1 if the current thread has SIMD lanes, 0 if it doesn't.
# Returns -1 on error.

proc current_thread_has_simd_lanes {} {
    global gdb_prompt decimal

    gdb_test_multiple "thread" "current_thread_has_simd_lanes" {
	-re "Current thread is $decimal.$decimal:$decimal .*$gdb_prompt $" {
	    return 1
	}
	-re "Current thread is $decimal:$decimal .*$gdb_prompt $" {
	    return 1
	}
	-re "Current thread is .*$gdb_prompt $" {
	    return 0
	}
	-re "$gdb_prompt $" {
	    fail $gdb_test_name
	    return 0
	}
    }

    fail $gdb_test_name
    return 0
}

# Returns the ID of the first stopped thread at $srcfile:$line that is not
# among ids_to_ignore. The returned thread ID is in the format of
# (<inferior number>.<thread number>) and SIMD lane information is omitted.
# For thread 2.3:0 returns "2.3".
# Returns "invalid" if no thread ID is found with given parameters.
proc get_another_stopped_thread {srcfile line ids_to_ignore {msg ""}} {
    global gdb_prompt decimal

    if [string match "" $msg] {
	set msg "get another stopped thread"
    }

    # Frame arguments are irrelevant.  Ignore them for faster results.
    set wpfa "with print frame-arguments none -- "

    set another_stopped_thread "invalid"
    gdb_test_multiple "${wpfa}info threads -stopped" $msg -lbl {
	-re "\r\n. ($decimal\(\.$decimal\)?)\[^\r\n\]* at $srcfile:$line" {
	    if {$another_stopped_thread eq "invalid"} {
		set next_thread $expect_out(1,string)
		if {[lsearch $ids_to_ignore $next_thread] == -1} {
		    set another_stopped_thread $next_thread
		}
	    }
	    exp_continue
	}
	-re "$gdb_prompt $" {
	    gdb_assert { $another_stopped_thread ne "invalid" } $gdb_test_name
	}
    }

    return $another_stopped_thread
}

# Returns the list of IDs of the threads stopped at $srcfile:$line.
# The returned thread IDs are in the format of (<inferior
# number>.<thread number>) and SIMD lane information is omitted.  For
# thread 2.3:0 returns "2.3".

proc get_stopped_threads {srcfile line {msg "get stopped threads"}} {
    global decimal gdb_prompt

    # Frame arguments are irrelevant.  Ignore them for faster results.
    set wpfa "with print frame-arguments none -- "

    set stopped_threads {}
    gdb_test_multiple "${wpfa}info threads -stopped" $msg -lbl {
	-re "\r\n. ($decimal\(\.$decimal\)?)\[^\r\n\]* at $srcfile:$line" {
	    lappend stopped_threads $expect_out(1,string)
	    exp_continue
	}
	-re "\r\n. ($decimal\(\.$decimal\)?)\[^\r\n\]* Selected thread is running" {
	    fail "$gdb_test_name"
	    exp_continue
	}
	-re "$gdb_prompt" {
	    pass $gdb_test_name
	}
    }

    return $stopped_threads
}

# Returns the ID of any unavailable thread.  The returned thread ID is in the
# format of (<inferior number>.<thread number>) and SIMD lane information is
# omitted.
# Returns "none" if no thread ID is found with given parameters.
proc get_one_unavailable_thread {{msg ""}} {
    global gdb_prompt decimal

    if [string match "" $msg] {
	set msg "get unavailable thread"
    }

    set unavailable_thread "none"
    gdb_test_multiple "info threads" $msg -lbl {
	-re " +($decimal\(\.$decimal\)?) +\[^\r\n\]+\(unavailable\)" {
	    if {$unavailable_thread eq "none"} {
		set unavailable_thread $expect_out(1,string)
	    }
	    exp_continue
	}
	-re -wrap "" {
	    gdb_assert {$unavailable_thread ne "none"} $gdb_test_name
	}
    }

    return $unavailable_thread
}


# Returns 1 if the target device is selected via OFFLOAD_DEVICE_GROUP
# and 0 otherwise.
# device contains ";" separated following information:
# Device name;Backend Type;Backend Platform version.
# See an example in init_sycl_devices_list.

proc is_sycl_device_filtered {device} {
    global OFFLOAD_DEVICE_GROUP

    # Filter according to OFFLOAD_DEVICE_GROUP.
    set device_info [split "$device" ";"]
    set backend [lindex $device_info 1]
    set device_type [lindex $device_info 3]

    if {[lsearch -nocase [split $OFFLOAD_DEVICE_GROUP ","] $device_type] < 0} {
	verbose -log "SYCL: device type $device_type is unwanted, skipping '$device'"
	return 0
    }

    if {$device_type == "gpu"
	&& [string match -nocase "*opencl*" $backend]} {
	verbose -log "SYCL: unsupported combination: $device_type & $backend"
	return 0
    }

    return 1
}

# Gets the list of args required for running the SYCL tests, where input device
# contains ";" separated following information:
# Device name;Backend Type;Backend Platform version;Device Type.
# See an example in init_sycl_devices_list.

proc sycl_get_device_args {device} {
    global hex

    set device_info [split "$device" ";"]
    set sycl_driver_platform [lindex $device_info 1]
    set sycl_driver_version [lindex $device_info 2]
    set device_type [lindex $device_info 3]
    set device_index [lindex $device_info 4]
    set device_name ""
    set args_list {}

    if {$device_type eq "gpu"} {
	lappend args_list "gpu"
	lappend args_list [lindex $device_info 0]
    } elseif {$device_type eq "cpu"} {
	lappend args_list "cpu"
	if {[string match "*Intel*" $device]} {
	    lappend args_list "Intel"
	}
    } elseif {$device_type eq "accelerator"} {
	lappend args_list "accelerator"
	if {[string match "*Intel*" $device]} {
	    lappend args_list "Intel"
	}
    } else {
	verbose "SYCL: Unexpected device type: ${device_type}" 0
    }
    lappend args_list $sycl_driver_platform
    lappend args_list $sycl_driver_version
    lappend args_list $device_index
    return $args_list
}

# Gets the prefix string required for the SYCL tests.
# DEVICE contains ";" separated following information:
# Device name;Backend Type;Backend Platform version;Device type;Device ID.
# e.g.
# Intel(R) Data Center GPU Max 1550;ext_oneapi_level_zero;1.3.29138;gpu;1
# Function returns ":" separated test prefix which has following info:
# In case of non GPU device: Device type:Backend type:cpp
# and in case of GPU: Device type GPU: Backend type: Graphics device ID
# e.g. gpu:ext_oneapi_level_zero:1

proc sycl_get_device_prefix {device} {
    global hex
    set args_list [sycl_get_device_args $device]

    if {[string match -nocase "*Graphics*" $device]
	 || [string match -nocase "*GPU*" $device]} {
	    # In case of GPU device, add device ID to the prefix to get a unique
	    # test name for multi GPU test machines.
	    return "[lindex $args_list 0]:[lindex $args_list 2]:[lindex $args_list 4]"
    }
    return "[lindex $args_list 0]:[lindex $args_list 2]:cpp"
}

# Run BODY under the lock, if DEVICE is an Intel GPU.  Also calls
# gdb_exit before releasing the GPU lock.
#
# See the similar 'with_gpu_lock' in rocm.exp.

proc sycl_with_intelgt_lock {device body} {
    with_test_prefix [sycl_get_device_prefix $device] {
	if {![require_sycl_device "$device" "gpu" "Intel*"]} {
	    set code [catch {uplevel 1 $body} result]
	} else {
	    with_lock $::intelgt_lock_filename {
		set code [catch {uplevel 1 $body} result]
	    }
	}

	# In case BODY returned early due to some testcase failing.
	gdb_exit
    }

    if {$code == 1} {
	return -code $code -errorinfo $::errorInfo \
	    -errorcode $::errorCode $result
    } else {
	return -code $code $result
    }
}

# Get the namespace version for the SYCL header corresponding to the compiler
# used.  Return 0 for older compilers using SYCL without namespace versioning.

proc get_sycl_header_version {} {
    if {[test_compiler_info {icx-202[3-9]-*} c++]} {
	return 1
    }

    return 0
}

# Function is for the performance tests common "assemble section"
# of the tests.

proc sycl_perftest_initialize {} {
    global binfile srcfile OFFLOAD_PERF_AOT_TESTING

    set sycl_device_list [init_sycl_devices_list]
    if {[llength $sycl_device_list] == 0} {
	unsupported "target does not support SYCL"
	return ""
    }

    set option ""
    if {$OFFLOAD_PERF_AOT_TESTING == "1"} {
	# LD and compile flags setting is needed for AOT testing.
	# TODO IGDB/3805: Make AOT Flags options generic again using
	# following options:
	# -fsycl-targets=spir64_x86_64,spir64_fpga,spir64_gen" "ldflags=-Xsycl-target-backend=spir64_gen \"-q -device xe:\"
	# Currently limited the AOT compilation to CPU only for performance
	# tests.
	set option [list "additional_flags=-fsycl-targets=spir64_x86_64"]
    }

    if {[build_executable "failed to compile $srcfile" \
	    "${binfile}" $srcfile [concat sycl debug $option]]} {
	return ""
    }

    # SYCL performance tests will run on the first available device, so make
    # sure to set the device filter properly for the required device.
    foreach device $sycl_device_list {
	with_test_prefix [sycl_get_device_prefix $device] {
	    verbose "SYCL: Initalized the device $device" 0
	    clean_restart "${binfile}"
	    return $device
	}
    }

    return ""
}

proc spawn_sycl_proc {executable device} {
    # We directly use 'remote_spawn' to be able to pass
    # the program arguments.
    set command [list $executable]
    foreach arg [sycl_get_device_args $device] {
	lappend command $arg
    }
    verbose -log "command: $command"

    set spawn_id [remote_spawn target $command]
    return $spawn_id
}
